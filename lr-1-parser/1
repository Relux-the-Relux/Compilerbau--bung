Starting parse
Entering state 0
Reducing stack by rule 1 (line 55):
-> $$ = nterm program ()
Stack now 0
Entering state 1
Reading a token: Next token is token "bool" ()
Shifting token "bool" ()
Entering state 3
Reducing stack by rule 37 (line 121):
   $1 = token "bool" ()
-> $$ = nterm type ()
Stack now 0 1
Entering state 9
Reading a token: Next token is token "identifier" ()
Shifting token "identifier" ()
Entering state 10
Reducing stack by rule 69 (line 173):
   $1 = token "identifier" ()
-> $$ = nterm id ()
Stack now 0 1 9
Entering state 11
Reading a token: Next token is token '(' ()
Shifting token '(' ()
Entering state 12
Reading a token: Next token is token "bool" ()
Shifting token "bool" ()
Entering state 3
Reducing stack by rule 37 (line 121):
   $1 = token "bool" ()
-> $$ = nterm type ()
Stack now 0 1 9 11 12
Entering state 16
Reading a token: Next token is token "identifier" ()
Shifting token "identifier" ()
Entering state 10
Reducing stack by rule 69 (line 173):
   $1 = token "identifier" ()
-> $$ = nterm id ()
Stack now 0 1 9 11 12 16
Entering state 31
Reading a token: Next token is token ')' ()
Reducing stack by rule 6 (line 64):
   $1 = nterm type ()
   $2 = nterm id ()
-> $$ = nterm parameterdefinition ()
Stack now 0 1 9 11 12
Entering state 15
Next token is token ')' ()
Shifting token ')' ()
Entering state 30
Reading a token: Next token is token '{' ()
Shifting token '{' ()
Entering state 47
Reducing stack by rule 12 (line 76):
-> $$ = nterm statementlist ()
Stack now 0 1 9 11 12 15 30 47
Entering state 88
Reading a token: Next token is token "if" ()
Shifting token "if" ()
Entering state 69
Reading a token: Next token is token '(' ()
Shifting token '(' ()
Entering state 100
Reading a token: Next token is token "identifier" ()
Shifting token "identifier" ()
Entering state 10
Reducing stack by rule 69 (line 173):
   $1 = token "identifier" ()
-> $$ = nterm id ()
Stack now 0 1 9 11 12 15 30 47 88 69 100
Entering state 28
Reading a token: Next token is token "==" ()
Reducing stack by rule 67 (line 169):
   $1 = nterm id ()
-> $$ = nterm factor ()
Stack now 0 1 9 11 12 15 30 47 88 69 100
Entering state 27
Reducing stack by rule 59 (line 159):
-> $$ = nterm extrafactor ()
Stack now 0 1 9 11 12 15 30 47 88 69 100 27
Entering state 43
Next token is token "==" ()
Reducing stack by rule 58 (line 156):
   $1 = nterm factor ()
   $2 = nterm extrafactor ()
-> $$ = nterm term ()
Stack now 0 1 9 11 12 15 30 47 88 69 100
Entering state 26
Reducing stack by rule 54 (line 150):
-> $$ = nterm extraterm ()
Stack now 0 1 9 11 12 15 30 47 88 69 100 26
Entering state 42
Next token is token "==" ()
Reducing stack by rule 53 (line 147):
   $1 = nterm term ()
   $2 = nterm extraterm ()
-> $$ = nterm simpexpr ()
Stack now 0 1 9 11 12 15 30 47 88 69 100
Entering state 25
Next token is token "==" ()
Shifting token "==" ()
Entering state 35
Reading a token: Next token is token "boolean literal" ()
Shifting token "boolean literal" ()
Entering state 20
Reducing stack by rule 65 (line 167):
   $1 = token "boolean literal" ()
-> $$ = nterm factor ()
Stack now 0 1 9 11 12 15 30 47 88 69 100 25 35
Entering state 27
Reducing stack by rule 59 (line 159):
-> $$ = nterm extrafactor ()
Stack now 0 1 9 11 12 15 30 47 88 69 100 25 35 27
Entering state 43
Reading a token: Next token is token ')' ()
Reducing stack by rule 58 (line 156):
   $1 = nterm factor ()
   $2 = nterm extrafactor ()
-> $$ = nterm term ()
Stack now 0 1 9 11 12 15 30 47 88 69 100 25 35
Entering state 26
Reducing stack by rule 54 (line 150):
-> $$ = nterm extraterm ()
Stack now 0 1 9 11 12 15 30 47 88 69 100 25 35 26
Entering state 42
Next token is token ')' ()
Reducing stack by rule 53 (line 147):
   $1 = nterm term ()
   $2 = nterm extraterm ()
-> $$ = nterm simpexpr ()
Stack now 0 1 9 11 12 15 30 47 88 69 100 25 35
Entering state 51
Reducing stack by rule 46 (line 138):
   $1 = token "==" ()
   $2 = nterm simpexpr ()
-> $$ = nterm extraexpr ()
Stack now 0 1 9 11 12 15 30 47 88 69 100 25
Entering state 41
Reducing stack by rule 45 (line 135):
   $1 = nterm simpexpr ()
   $2 = nterm extraexpr ()
-> $$ = nterm expr ()
Stack now 0 1 9 11 12 15 30 47 88 69 100
Entering state 24
Reducing stack by rule 43 (line 131):
   $1 = nterm expr ()
-> $$ = nterm assignment ()
Stack now 0 1 9 11 12 15 30 47 88 69 100
Entering state 119
Next token is token ')' ()
Shifting token ')' ()
Entering state 128
Reading a token: Next token is token "return" ()
Shifting token "return" ()
Entering state 71
Reading a token: Next token is token "boolean literal" ()
Shifting token "boolean literal" ()
Entering state 20
Reducing stack by rule 65 (line 167):
   $1 = token "boolean literal" ()
-> $$ = nterm factor ()
Stack now 0 1 9 11 12 15 30 47 88 69 100 119 128 71
Entering state 27
Reducing stack by rule 59 (line 159):
-> $$ = nterm extrafactor ()
Stack now 0 1 9 11 12 15 30 47 88 69 100 119 128 71 27
Entering state 43
Reading a token: Next token is token ';' ()
Reducing stack by rule 58 (line 156):
   $1 = nterm factor ()
   $2 = nterm extrafactor ()
-> $$ = nterm term ()
Stack now 0 1 9 11 12 15 30 47 88 69 100 119 128 71
Entering state 26
Reducing stack by rule 54 (line 150):
-> $$ = nterm extraterm ()
Stack now 0 1 9 11 12 15 30 47 88 69 100 119 128 71 26
Entering state 42
Next token is token ';' ()
Reducing stack by rule 53 (line 147):
   $1 = nterm term ()
   $2 = nterm extraterm ()
-> $$ = nterm simpexpr ()
Stack now 0 1 9 11 12 15 30 47 88 69 100 119 128 71
Entering state 25
Next token is token ';' ()
Reducing stack by rule 44 (line 134):
   $1 = nterm simpexpr ()
-> $$ = nterm expr ()
Stack now 0 1 9 11 12 15 30 47 88 69 100 119 128 71
Entering state 24
Reducing stack by rule 43 (line 131):
   $1 = nterm expr ()
-> $$ = nterm assignment ()
Stack now 0 1 9 11 12 15 30 47 88 69 100 119 128 71
Entering state 102
Reducing stack by rule 32 (line 110):
   $1 = token "return" ()
   $2 = nterm assignment ()
-> $$ = nterm returnstatement ()
Stack now 0 1 9 11 12 15 30 47 88 69 100 119 128
Entering state 82
Next token is token ';' ()
Shifting token ';' ()
Entering state 107
Reducing stack by rule 19 (line 87):
   $1 = nterm returnstatement ()
   $2 = token ';' ()
-> $$ = nterm statement ()
Stack now 0 1 9 11 12 15 30 47 88 69 100 119 128
Entering state 77
Reducing stack by rule 15 (line 81):
   $1 = nterm statement ()
-> $$ = nterm block ()
Stack now 0 1 9 11 12 15 30 47 88 69 100 119 128
Entering state 135
Reading a token: Next token is token "else" ()
Shifting token "else" ()
Entering state 140
Reading a token: Next token is token "return" ()
Shifting token "return" ()
Entering state 71
Reading a token: Next token is token "boolean literal" ()
Shifting token "boolean literal" ()
Entering state 20
Reducing stack by rule 65 (line 167):
   $1 = token "boolean literal" ()
-> $$ = nterm factor ()
Stack now 0 1 9 11 12 15 30 47 88 69 100 119 128 135 140 71
Entering state 27
Reducing stack by rule 59 (line 159):
-> $$ = nterm extrafactor ()
Stack now 0 1 9 11 12 15 30 47 88 69 100 119 128 135 140 71 27
Entering state 43
Reading a token: Next token is token ';' ()
Reducing stack by rule 58 (line 156):
   $1 = nterm factor ()
   $2 = nterm extrafactor ()
-> $$ = nterm term ()
Stack now 0 1 9 11 12 15 30 47 88 69 100 119 128 135 140 71
Entering state 26
Reducing stack by rule 54 (line 150):
-> $$ = nterm extraterm ()
Stack now 0 1 9 11 12 15 30 47 88 69 100 119 128 135 140 71 26
Entering state 42
Next token is token ';' ()
Reducing stack by rule 53 (line 147):
   $1 = nterm term ()
   $2 = nterm extraterm ()
-> $$ = nterm simpexpr ()
Stack now 0 1 9 11 12 15 30 47 88 69 100 119 128 135 140 71
Entering state 25
Next token is token ';' ()
Reducing stack by rule 44 (line 134):
   $1 = nterm simpexpr ()
-> $$ = nterm expr ()
Stack now 0 1 9 11 12 15 30 47 88 69 100 119 128 135 140 71
Entering state 24
Reducing stack by rule 43 (line 131):
   $1 = nterm expr ()
-> $$ = nterm assignment ()
Stack now 0 1 9 11 12 15 30 47 88 69 100 119 128 135 140 71
Entering state 102
Reducing stack by rule 32 (line 110):
   $1 = token "return" ()
   $2 = nterm assignment ()
-> $$ = nterm returnstatement ()
Stack now 0 1 9 11 12 15 30 47 88 69 100 119 128 135 140
Entering state 82
Next token is token ';' ()
Shifting token ';' ()
Entering state 107
Reducing stack by rule 19 (line 87):
   $1 = nterm returnstatement ()
   $2 = token ';' ()
-> $$ = nterm statement ()
Stack now 0 1 9 11 12 15 30 47 88 69 100 119 128 135 140
Entering state 77
Reducing stack by rule 15 (line 81):
   $1 = nterm statement ()
-> $$ = nterm block ()
Stack now 0 1 9 11 12 15 30 47 88 69 100 119 128 135 140
Entering state 143
Reducing stack by rule 26 (line 96):
   $1 = token "if" ()
   $2 = token '(' ()
   $3 = nterm assignment ()
   $4 = token ')' ()
   $5 = nterm block ()
   $6 = token "else" ()
   $7 = nterm block ()
-> $$ = nterm ifstatement ()
Stack now 0 1 9 11 12 15 30 47 88
Entering state 78
Reducing stack by rule 16 (line 84):
   $1 = nterm ifstatement ()
-> $$ = nterm statement ()
Stack now 0 1 9 11 12 15 30 47 88
Entering state 77
Reducing stack by rule 15 (line 81):
   $1 = nterm statement ()
-> $$ = nterm block ()
Stack now 0 1 9 11 12 15 30 47 88
Entering state 76
Reducing stack by rule 13 (line 77):
   $1 = nterm statementlist ()
   $2 = nterm block ()
-> $$ = nterm statementlist ()
Stack now 0 1 9 11 12 15 30 47
Entering state 88
Reading a token: Next token is token '}' ()
Shifting token '}' ()
Entering state 113
Reducing stack by rule 4 (line 60):
   $1 = nterm type ()
   $2 = nterm id ()
   $3 = token '(' ()
   $4 = nterm parameterdefinition ()
   $5 = token ')' ()
   $6 = token '{' ()
   $7 = nterm statementlist ()
   $8 = token '}' ()
-> $$ = nterm functiondefinition ()
Stack now 0 1
Entering state 7
Reducing stack by rule 3 (line 57):
   $1 = nterm program ()
   $2 = nterm functiondefinition ()
-> $$ = nterm program ()
Stack now 0
Entering state 1
Reading a token: Next token is token "bool" ()
Shifting token "bool" ()
Entering state 3
Reducing stack by rule 37 (line 121):
   $1 = token "bool" ()
-> $$ = nterm type ()
Stack now 0 1
Entering state 9
Reading a token: Next token is token "identifier" ()
Shifting token "identifier" ()
Entering state 10
Reducing stack by rule 69 (line 173):
   $1 = token "identifier" ()
-> $$ = nterm id ()
Stack now 0 1 9
Entering state 11
Reading a token: Next token is token '(' ()
Shifting token '(' ()
Entering state 12
Reading a token: Next token is token "bool" ()
Shifting token "bool" ()
Entering state 3
Reducing stack by rule 37 (line 121):
   $1 = token "bool" ()
-> $$ = nterm type ()
Stack now 0 1 9 11 12
Entering state 16
Reading a token: Next token is token "identifier" ()
Shifting token "identifier" ()
Entering state 10
Reducing stack by rule 69 (line 173):
   $1 = token "identifier" ()
-> $$ = nterm id ()
Stack now 0 1 9 11 12 16
Entering state 31
Reading a token: Next token is token ',' ()
Shifting token ',' ()
Entering state 48
Reading a token: Next token is token "bool" ()
Shifting token "bool" ()
Entering state 3
Reducing stack by rule 37 (line 121):
   $1 = token "bool" ()
-> $$ = nterm type ()
Stack now 0 1 9 11 12 16 31 48
Entering state 16
Reading a token: Next token is token "identifier" ()
Shifting token "identifier" ()
Entering state 10
Reducing stack by rule 69 (line 173):
   $1 = token "identifier" ()
-> $$ = nterm id ()
Stack now 0 1 9 11 12 16 31 48 16
Entering state 31
Reading a token: Next token is token ')' ()
Reducing stack by rule 6 (line 64):
   $1 = nterm type ()
   $2 = nterm id ()
-> $$ = nterm parameterdefinition ()
Stack now 0 1 9 11 12 16 31 48
Entering state 89
Reducing stack by rule 7 (line 65):
   $1 = nterm type ()
   $2 = nterm id ()
   $3 = token ',' ()
   $4 = nterm parameterdefinition ()
-> $$ = nterm parameterdefinition ()
Stack now 0 1 9 11 12
Entering state 15
Next token is token ')' ()
Shifting token ')' ()
Entering state 30
Reading a token: Next token is token '{' ()
Shifting token '{' ()
Entering state 47
Reducing stack by rule 12 (line 76):
-> $$ = nterm statementlist ()
Stack now 0 1 9 11 12 15 30 47
Entering state 88
Reading a token: Next token is token "return" ()
Shifting token "return" ()
Entering state 71
Reading a token: Next token is token "identifier" ()
Shifting token "identifier" ()
Entering state 10
Reducing stack by rule 69 (line 173):
   $1 = token "identifier" ()
-> $$ = nterm id ()
Stack now 0 1 9 11 12 15 30 47 88 71
Entering state 28
Reading a token: Next token is token '(' ()
Shifting token '(' ()
Entering state 44
Reading a token: Next token is token "identifier" ()
Shifting token "identifier" ()
Entering state 10
Reducing stack by rule 69 (line 173):
   $1 = token "identifier" ()
-> $$ = nterm id ()
Stack now 0 1 9 11 12 15 30 47 88 71 28 44
Entering state 28
Reading a token: Next token is token "||" ()
Reducing stack by rule 67 (line 169):
   $1 = nterm id ()
-> $$ = nterm factor ()
Stack now 0 1 9 11 12 15 30 47 88 71 28 44
Entering state 27
Reducing stack by rule 59 (line 159):
-> $$ = nterm extrafactor ()
Stack now 0 1 9 11 12 15 30 47 88 71 28 44 27
Entering state 43
Next token is token "||" ()
Reducing stack by rule 58 (line 156):
   $1 = nterm factor ()
   $2 = nterm extrafactor ()
-> $$ = nterm term ()
Stack now 0 1 9 11 12 15 30 47 88 71 28 44
Entering state 26
Reducing stack by rule 54 (line 150):
-> $$ = nterm extraterm ()
Stack now 0 1 9 11 12 15 30 47 88 71 28 44 26
Entering state 42
Next token is token "||" ()
Shifting token "||" ()
Entering state 59
Reading a token: Next token is token "identifier" ()
Shifting token "identifier" ()
Entering state 10
Reducing stack by rule 69 (line 173):
   $1 = token "identifier" ()
-> $$ = nterm id ()
Stack now 0 1 9 11 12 15 30 47 88 71 28 44 26 42 59
Entering state 33
Reading a token: Next token is token ')' ()
Reducing stack by rule 67 (line 169):
   $1 = nterm id ()
-> $$ = nterm factor ()
Stack now 0 1 9 11 12 15 30 47 88 71 28 44 26 42 59
Entering state 27
Reducing stack by rule 59 (line 159):
-> $$ = nterm extrafactor ()
Stack now 0 1 9 11 12 15 30 47 88 71 28 44 26 42 59 27
Entering state 43
Next token is token ')' ()
Reducing stack by rule 58 (line 156):
   $1 = nterm factor ()
   $2 = nterm extrafactor ()
-> $$ = nterm term ()
Stack now 0 1 9 11 12 15 30 47 88 71 28 44 26 42 59
Entering state 92
Reducing stack by rule 57 (line 153):
   $1 = nterm extraterm ()
   $2 = token "||" ()
   $3 = nterm term ()
-> $$ = nterm extraterm ()
Stack now 0 1 9 11 12 15 30 47 88 71 28 44 26
Entering state 42
Next token is token ')' ()
Reducing stack by rule 53 (line 147):
   $1 = nterm term ()
   $2 = nterm extraterm ()
-> $$ = nterm simpexpr ()
Stack now 0 1 9 11 12 15 30 47 88 71 28 44
Entering state 25
Next token is token ')' ()
Reducing stack by rule 44 (line 134):
   $1 = nterm simpexpr ()
-> $$ = nterm expr ()
Stack now 0 1 9 11 12 15 30 47 88 71 28 44
Entering state 24
Reducing stack by rule 43 (line 131):
   $1 = nterm expr ()
-> $$ = nterm assignment ()
Stack now 0 1 9 11 12 15 30 47 88 71 28 44
Entering state 65
Next token is token ')' ()
Reducing stack by rule 10 (line 72):
   $1 = nterm assignment ()
-> $$ = nterm parameterlist ()
Stack now 0 1 9 11 12 15 30 47 88 71 28 44
Entering state 64
Next token is token ')' ()
Shifting token ')' ()
Entering state 96
Reducing stack by rule 9 (line 69):
   $1 = nterm id ()
   $2 = token '(' ()
   $3 = nterm parameterlist ()
   $4 = token ')' ()
-> $$ = nterm functioncall ()
Stack now 0 1 9 11 12 15 30 47 88 71
Entering state 22
Reducing stack by rule 66 (line 168):
   $1 = nterm functioncall ()
-> $$ = nterm factor ()
Stack now 0 1 9 11 12 15 30 47 88 71
Entering state 27
Reducing stack by rule 59 (line 159):
-> $$ = nterm extrafactor ()
Stack now 0 1 9 11 12 15 30 47 88 71 27
Entering state 43
Reading a token: Next token is token ';' ()
Reducing stack by rule 58 (line 156):
   $1 = nterm factor ()
   $2 = nterm extrafactor ()
-> $$ = nterm term ()
Stack now 0 1 9 11 12 15 30 47 88 71
Entering state 26
Reducing stack by rule 54 (line 150):
-> $$ = nterm extraterm ()
Stack now 0 1 9 11 12 15 30 47 88 71 26
Entering state 42
Next token is token ';' ()
Reducing stack by rule 53 (line 147):
   $1 = nterm term ()
   $2 = nterm extraterm ()
-> $$ = nterm simpexpr ()
Stack now 0 1 9 11 12 15 30 47 88 71
Entering state 25
Next token is token ';' ()
Reducing stack by rule 44 (line 134):
   $1 = nterm simpexpr ()
-> $$ = nterm expr ()
Stack now 0 1 9 11 12 15 30 47 88 71
Entering state 24
Reducing stack by rule 43 (line 131):
   $1 = nterm expr ()
-> $$ = nterm assignment ()
Stack now 0 1 9 11 12 15 30 47 88 71
Entering state 102
Reducing stack by rule 32 (line 110):
   $1 = token "return" ()
   $2 = nterm assignment ()
-> $$ = nterm returnstatement ()
Stack now 0 1 9 11 12 15 30 47 88
Entering state 82
Next token is token ';' ()
Shifting token ';' ()
Entering state 107
Reducing stack by rule 19 (line 87):
   $1 = nterm returnstatement ()
   $2 = token ';' ()
-> $$ = nterm statement ()
Stack now 0 1 9 11 12 15 30 47 88
Entering state 77
Reducing stack by rule 15 (line 81):
   $1 = nterm statement ()
-> $$ = nterm block ()
Stack now 0 1 9 11 12 15 30 47 88
Entering state 76
Reducing stack by rule 13 (line 77):
   $1 = nterm statementlist ()
   $2 = nterm block ()
-> $$ = nterm statementlist ()
Stack now 0 1 9 11 12 15 30 47
Entering state 88
Reading a token: Next token is token '}' ()
Shifting token '}' ()
Entering state 113
Reducing stack by rule 4 (line 60):
   $1 = nterm type ()
   $2 = nterm id ()
   $3 = token '(' ()
   $4 = nterm parameterdefinition ()
   $5 = token ')' ()
   $6 = token '{' ()
   $7 = nterm statementlist ()
   $8 = token '}' ()
-> $$ = nterm functiondefinition ()
Stack now 0 1
Entering state 7
Reducing stack by rule 3 (line 57):
   $1 = nterm program ()
   $2 = nterm functiondefinition ()
-> $$ = nterm program ()
Stack now 0
Entering state 1
Reading a token: Next token is token "bool" ()
Shifting token "bool" ()
Entering state 3
Reducing stack by rule 37 (line 121):
   $1 = token "bool" ()
-> $$ = nterm type ()
Stack now 0 1
Entering state 9
Reading a token: Next token is token "identifier" ()
Shifting token "identifier" ()
Entering state 10
Reducing stack by rule 69 (line 173):
   $1 = token "identifier" ()
-> $$ = nterm id ()
Stack now 0 1 9
Entering state 11
Reading a token: Next token is token '(' ()
Shifting token '(' ()
Entering state 12
Reading a token: Next token is token "bool" ()
Shifting token "bool" ()
Entering state 3
Reducing stack by rule 37 (line 121):
   $1 = token "bool" ()
-> $$ = nterm type ()
Stack now 0 1 9 11 12
Entering state 16
Reading a token: Next token is token "identifier" ()
Shifting token "identifier" ()
Entering state 10
Reducing stack by rule 69 (line 173):
   $1 = token "identifier" ()
-> $$ = nterm id ()
Stack now 0 1 9 11 12 16
Entering state 31
Reading a token: Next token is token ',' ()
Shifting token ',' ()
Entering state 48
Reading a token: Next token is token "bool" ()
Shifting token "bool" ()
Entering state 3
Reducing stack by rule 37 (line 121):
   $1 = token "bool" ()
-> $$ = nterm type ()
Stack now 0 1 9 11 12 16 31 48
Entering state 16
Reading a token: Next token is token "identifier" ()
Shifting token "identifier" ()
Entering state 10
Reducing stack by rule 69 (line 173):
   $1 = token "identifier" ()
-> $$ = nterm id ()
Stack now 0 1 9 11 12 16 31 48 16
Entering state 31
Reading a token: Next token is token ')' ()
Reducing stack by rule 6 (line 64):
   $1 = nterm type ()
   $2 = nterm id ()
-> $$ = nterm parameterdefinition ()
Stack now 0 1 9 11 12 16 31 48
Entering state 89
Reducing stack by rule 7 (line 65):
   $1 = nterm type ()
   $2 = nterm id ()
   $3 = token ',' ()
   $4 = nterm parameterdefinition ()
-> $$ = nterm parameterdefinition ()
Stack now 0 1 9 11 12
Entering state 15
Next token is token ')' ()
Shifting token ')' ()
Entering state 30
Reading a token: Next token is token '{' ()
Shifting token '{' ()
Entering state 47
Reducing stack by rule 12 (line 76):
-> $$ = nterm statementlist ()
Stack now 0 1 9 11 12 15 30 47
Entering state 88
Reading a token: Next token is token "return" ()
Shifting token "return" ()
Entering state 71
Reading a token: Next token is token "identifier" ()
Shifting token "identifier" ()
Entering state 10
Reducing stack by rule 69 (line 173):
   $1 = token "identifier" ()
-> $$ = nterm id ()
Stack now 0 1 9 11 12 15 30 47 88 71
Entering state 28
Reading a token: Next token is token '(' ()
Shifting token '(' ()
Entering state 44
Reading a token: Next token is token "identifier" ()
Shifting token "identifier" ()
Entering state 10
Reducing stack by rule 69 (line 173):
   $1 = token "identifier" ()
-> $$ = nterm id ()
Stack now 0 1 9 11 12 15 30 47 88 71 28 44
Entering state 28
Reading a token: Next token is token ')' ()
Reducing stack by rule 67 (line 169):
   $1 = nterm id ()
-> $$ = nterm factor ()
Stack now 0 1 9 11 12 15 30 47 88 71 28 44
Entering state 27
Reducing stack by rule 59 (line 159):
-> $$ = nterm extrafactor ()
Stack now 0 1 9 11 12 15 30 47 88 71 28 44 27
Entering state 43
Next token is token ')' ()
Reducing stack by rule 58 (line 156):
   $1 = nterm factor ()
   $2 = nterm extrafactor ()
-> $$ = nterm term ()
Stack now 0 1 9 11 12 15 30 47 88 71 28 44
Entering state 26
Reducing stack by rule 54 (line 150):
-> $$ = nterm extraterm ()
Stack now 0 1 9 11 12 15 30 47 88 71 28 44 26
Entering state 42
Next token is token ')' ()
Reducing stack by rule 53 (line 147):
   $1 = nterm term ()
   $2 = nterm extraterm ()
-> $$ = nterm simpexpr ()
Stack now 0 1 9 11 12 15 30 47 88 71 28 44
Entering state 25
Next token is token ')' ()
Reducing stack by rule 44 (line 134):
   $1 = nterm simpexpr ()
-> $$ = nterm expr ()
Stack now 0 1 9 11 12 15 30 47 88 71 28 44
Entering state 24
Reducing stack by rule 43 (line 131):
   $1 = nterm expr ()
-> $$ = nterm assignment ()
Stack now 0 1 9 11 12 15 30 47 88 71 28 44
Entering state 65
Next token is token ')' ()
Reducing stack by rule 10 (line 72):
   $1 = nterm assignment ()
-> $$ = nterm parameterlist ()
Stack now 0 1 9 11 12 15 30 47 88 71 28 44
Entering state 64
Next token is token ')' ()
Shifting token ')' ()
Entering state 96
Reducing stack by rule 9 (line 69):
   $1 = nterm id ()
   $2 = token '(' ()
   $3 = nterm parameterlist ()
   $4 = token ')' ()
-> $$ = nterm functioncall ()
Stack now 0 1 9 11 12 15 30 47 88 71
Entering state 22
Reducing stack by rule 66 (line 168):
   $1 = nterm functioncall ()
-> $$ = nterm factor ()
Stack now 0 1 9 11 12 15 30 47 88 71
Entering state 27
Reducing stack by rule 59 (line 159):
-> $$ = nterm extrafactor ()
Stack now 0 1 9 11 12 15 30 47 88 71 27
Entering state 43
Reading a token: Next token is token "&&" ()
Shifting token "&&" ()
Entering state 62
Reading a token: Next token is token "identifier" ()
Shifting token "identifier" ()
Entering state 10
Reducing stack by rule 69 (line 173):
   $1 = token "identifier" ()
-> $$ = nterm id ()
Stack now 0 1 9 11 12 15 30 47 88 71 27 43 62
Entering state 33
Reading a token: Next token is token '(' ()
Shifting token '(' ()
Entering state 44
Reading a token: Next token is token "identifier" ()
Shifting token "identifier" ()
Entering state 10
Reducing stack by rule 69 (line 173):
   $1 = token "identifier" ()
-> $$ = nterm id ()
Stack now 0 1 9 11 12 15 30 47 88 71 27 43 62 33 44
Entering state 28
Reading a token: Next token is token ')' ()
Reducing stack by rule 67 (line 169):
   $1 = nterm id ()
-> $$ = nterm factor ()
Stack now 0 1 9 11 12 15 30 47 88 71 27 43 62 33 44
Entering state 27
Reducing stack by rule 59 (line 159):
-> $$ = nterm extrafactor ()
Stack now 0 1 9 11 12 15 30 47 88 71 27 43 62 33 44 27
Entering state 43
Next token is token ')' ()
Reducing stack by rule 58 (line 156):
   $1 = nterm factor ()
   $2 = nterm extrafactor ()
-> $$ = nterm term ()
Stack now 0 1 9 11 12 15 30 47 88 71 27 43 62 33 44
Entering state 26
Reducing stack by rule 54 (line 150):
-> $$ = nterm extraterm ()
Stack now 0 1 9 11 12 15 30 47 88 71 27 43 62 33 44 26
Entering state 42
Next token is token ')' ()
Reducing stack by rule 53 (line 147):
   $1 = nterm term ()
   $2 = nterm extraterm ()
-> $$ = nterm simpexpr ()
Stack now 0 1 9 11 12 15 30 47 88 71 27 43 62 33 44
Entering state 25
Next token is token ')' ()
Reducing stack by rule 44 (line 134):
   $1 = nterm simpexpr ()
-> $$ = nterm expr ()
Stack now 0 1 9 11 12 15 30 47 88 71 27 43 62 33 44
Entering state 24
Reducing stack by rule 43 (line 131):
   $1 = nterm expr ()
-> $$ = nterm assignment ()
Stack now 0 1 9 11 12 15 30 47 88 71 27 43 62 33 44
Entering state 65
Next token is token ')' ()
Reducing stack by rule 10 (line 72):
   $1 = nterm assignment ()
-> $$ = nterm parameterlist ()
Stack now 0 1 9 11 12 15 30 47 88 71 27 43 62 33 44
Entering state 64
Next token is token ')' ()
Shifting token ')' ()
Entering state 96
Reducing stack by rule 9 (line 69):
   $1 = nterm id ()
   $2 = token '(' ()
   $3 = nterm parameterlist ()
   $4 = token ')' ()
-> $$ = nterm functioncall ()
Stack now 0 1 9 11 12 15 30 47 88 71 27 43 62
Entering state 22
Reducing stack by rule 66 (line 168):
   $1 = nterm functioncall ()
-> $$ = nterm factor ()
Stack now 0 1 9 11 12 15 30 47 88 71 27 43 62
Entering state 95
Reducing stack by rule 62 (line 162):
   $1 = nterm extrafactor ()
   $2 = token "&&" ()
   $3 = nterm factor ()
-> $$ = nterm extrafactor ()
Stack now 0 1 9 11 12 15 30 47 88 71 27
Entering state 43
Reading a token: Next token is token ';' ()
Reducing stack by rule 58 (line 156):
   $1 = nterm factor ()
   $2 = nterm extrafactor ()
-> $$ = nterm term ()
Stack now 0 1 9 11 12 15 30 47 88 71
Entering state 26
Reducing stack by rule 54 (line 150):
-> $$ = nterm extraterm ()
Stack now 0 1 9 11 12 15 30 47 88 71 26
Entering state 42
Next token is token ';' ()
Reducing stack by rule 53 (line 147):
   $1 = nterm term ()
   $2 = nterm extraterm ()
-> $$ = nterm simpexpr ()
Stack now 0 1 9 11 12 15 30 47 88 71
Entering state 25
Next token is token ';' ()
Reducing stack by rule 44 (line 134):
   $1 = nterm simpexpr ()
-> $$ = nterm expr ()
Stack now 0 1 9 11 12 15 30 47 88 71
Entering state 24
Reducing stack by rule 43 (line 131):
   $1 = nterm expr ()
-> $$ = nterm assignment ()
Stack now 0 1 9 11 12 15 30 47 88 71
Entering state 102
Reducing stack by rule 32 (line 110):
   $1 = token "return" ()
   $2 = nterm assignment ()
-> $$ = nterm returnstatement ()
Stack now 0 1 9 11 12 15 30 47 88
Entering state 82
Next token is token ';' ()
Shifting token ';' ()
Entering state 107
Reducing stack by rule 19 (line 87):
   $1 = nterm returnstatement ()
   $2 = token ';' ()
-> $$ = nterm statement ()
Stack now 0 1 9 11 12 15 30 47 88
Entering state 77
Reducing stack by rule 15 (line 81):
   $1 = nterm statement ()
-> $$ = nterm block ()
Stack now 0 1 9 11 12 15 30 47 88
Entering state 76
Reducing stack by rule 13 (line 77):
   $1 = nterm statementlist ()
   $2 = nterm block ()
-> $$ = nterm statementlist ()
Stack now 0 1 9 11 12 15 30 47
Entering state 88
Reading a token: Next token is token '}' ()
Shifting token '}' ()
Entering state 113
Reducing stack by rule 4 (line 60):
   $1 = nterm type ()
   $2 = nterm id ()
   $3 = token '(' ()
   $4 = nterm parameterdefinition ()
   $5 = token ')' ()
   $6 = token '{' ()
   $7 = nterm statementlist ()
   $8 = token '}' ()
-> $$ = nterm functiondefinition ()
Stack now 0 1
Entering state 7
Reducing stack by rule 3 (line 57):
   $1 = nterm program ()
   $2 = nterm functiondefinition ()
-> $$ = nterm program ()
Stack now 0
Entering state 1
Reading a token: Next token is token "bool" ()
Shifting token "bool" ()
Entering state 3
Reducing stack by rule 37 (line 121):
   $1 = token "bool" ()
-> $$ = nterm type ()
Stack now 0 1
Entering state 9
Reading a token: Next token is token "identifier" ()
Shifting token "identifier" ()
Entering state 10
Reducing stack by rule 69 (line 173):
   $1 = token "identifier" ()
-> $$ = nterm id ()
Stack now 0 1 9
Entering state 11
Reading a token: Next token is token '(' ()
Shifting token '(' ()
Entering state 12
Reading a token: Next token is token "bool" ()
Shifting token "bool" ()
Entering state 3
Reducing stack by rule 37 (line 121):
   $1 = token "bool" ()
-> $$ = nterm type ()
Stack now 0 1 9 11 12
Entering state 16
Reading a token: Next token is token "identifier" ()
Shifting token "identifier" ()
Entering state 10
Reducing stack by rule 69 (line 173):
   $1 = token "identifier" ()
-> $$ = nterm id ()
Stack now 0 1 9 11 12 16
Entering state 31
Reading a token: Next token is token ',' ()
Shifting token ',' ()
Entering state 48
Reading a token: Next token is token "bool" ()
Shifting token "bool" ()
Entering state 3
Reducing stack by rule 37 (line 121):
   $1 = token "bool" ()
-> $$ = nterm type ()
Stack now 0 1 9 11 12 16 31 48
Entering state 16
Reading a token: Next token is token "identifier" ()
Shifting token "identifier" ()
Entering state 10
Reducing stack by rule 69 (line 173):
   $1 = token "identifier" ()
-> $$ = nterm id ()
Stack now 0 1 9 11 12 16 31 48 16
Entering state 31
Reading a token: Next token is token ')' ()
Reducing stack by rule 6 (line 64):
   $1 = nterm type ()
   $2 = nterm id ()
-> $$ = nterm parameterdefinition ()
Stack now 0 1 9 11 12 16 31 48
Entering state 89
Reducing stack by rule 7 (line 65):
   $1 = nterm type ()
   $2 = nterm id ()
   $3 = token ',' ()
   $4 = nterm parameterdefinition ()
-> $$ = nterm parameterdefinition ()
Stack now 0 1 9 11 12
Entering state 15
Next token is token ')' ()
Shifting token ')' ()
Entering state 30
Reading a token: Next token is token '{' ()
Shifting token '{' ()
Entering state 47
Reducing stack by rule 12 (line 76):
-> $$ = nterm statementlist ()
Stack now 0 1 9 11 12 15 30 47
Entering state 88
Reading a token: Next token is token "return" ()
Shifting token "return" ()
Entering state 71
Reading a token: Next token is token "identifier" ()
Shifting token "identifier" ()
Entering state 10
Reducing stack by rule 69 (line 173):
   $1 = token "identifier" ()
-> $$ = nterm id ()
Stack now 0 1 9 11 12 15 30 47 88 71
Entering state 28
Reading a token: Next token is token '(' ()
Shifting token '(' ()
Entering state 44
Reading a token: Next token is token "identifier" ()
Shifting token "identifier" ()
Entering state 10
Reducing stack by rule 69 (line 173):
   $1 = token "identifier" ()
-> $$ = nterm id ()
Stack now 0 1 9 11 12 15 30 47 88 71 28 44
Entering state 28
Reading a token: Next token is token "&&" ()
Reducing stack by rule 67 (line 169):
   $1 = nterm id ()
-> $$ = nterm factor ()
Stack now 0 1 9 11 12 15 30 47 88 71 28 44
Entering state 27
Reducing stack by rule 59 (line 159):
-> $$ = nterm extrafactor ()
Stack now 0 1 9 11 12 15 30 47 88 71 28 44 27
Entering state 43
Next token is token "&&" ()
Shifting token "&&" ()
Entering state 62
Reading a token: Next token is token "identifier" ()
Shifting token "identifier" ()
Entering state 10
Reducing stack by rule 69 (line 173):
   $1 = token "identifier" ()
-> $$ = nterm id ()
Stack now 0 1 9 11 12 15 30 47 88 71 28 44 27 43 62
Entering state 33
Reading a token: Next token is token ')' ()
Reducing stack by rule 67 (line 169):
   $1 = nterm id ()
-> $$ = nterm factor ()
Stack now 0 1 9 11 12 15 30 47 88 71 28 44 27 43 62
Entering state 95
Reducing stack by rule 62 (line 162):
   $1 = nterm extrafactor ()
   $2 = token "&&" ()
   $3 = nterm factor ()
-> $$ = nterm extrafactor ()
Stack now 0 1 9 11 12 15 30 47 88 71 28 44 27
Entering state 43
Next token is token ')' ()
Reducing stack by rule 58 (line 156):
   $1 = nterm factor ()
   $2 = nterm extrafactor ()
-> $$ = nterm term ()
Stack now 0 1 9 11 12 15 30 47 88 71 28 44
Entering state 26
Reducing stack by rule 54 (line 150):
-> $$ = nterm extraterm ()
Stack now 0 1 9 11 12 15 30 47 88 71 28 44 26
Entering state 42
Next token is token ')' ()
Reducing stack by rule 53 (line 147):
   $1 = nterm term ()
   $2 = nterm extraterm ()
-> $$ = nterm simpexpr ()
Stack now 0 1 9 11 12 15 30 47 88 71 28 44
Entering state 25
Next token is token ')' ()
Reducing stack by rule 44 (line 134):
   $1 = nterm simpexpr ()
-> $$ = nterm expr ()
Stack now 0 1 9 11 12 15 30 47 88 71 28 44
Entering state 24
Reducing stack by rule 43 (line 131):
   $1 = nterm expr ()
-> $$ = nterm assignment ()
Stack now 0 1 9 11 12 15 30 47 88 71 28 44
Entering state 65
Next token is token ')' ()
Reducing stack by rule 10 (line 72):
   $1 = nterm assignment ()
-> $$ = nterm parameterlist ()
Stack now 0 1 9 11 12 15 30 47 88 71 28 44
Entering state 64
Next token is token ')' ()
Shifting token ')' ()
Entering state 96
Reducing stack by rule 9 (line 69):
   $1 = nterm id ()
   $2 = token '(' ()
   $3 = nterm parameterlist ()
   $4 = token ')' ()
-> $$ = nterm functioncall ()
Stack now 0 1 9 11 12 15 30 47 88 71
Entering state 22
Reducing stack by rule 66 (line 168):
   $1 = nterm functioncall ()
-> $$ = nterm factor ()
Stack now 0 1 9 11 12 15 30 47 88 71
Entering state 27
Reducing stack by rule 59 (line 159):
-> $$ = nterm extrafactor ()
Stack now 0 1 9 11 12 15 30 47 88 71 27
Entering state 43
Reading a token: Next token is token ';' ()
Reducing stack by rule 58 (line 156):
   $1 = nterm factor ()
   $2 = nterm extrafactor ()
-> $$ = nterm term ()
Stack now 0 1 9 11 12 15 30 47 88 71
Entering state 26
Reducing stack by rule 54 (line 150):
-> $$ = nterm extraterm ()
Stack now 0 1 9 11 12 15 30 47 88 71 26
Entering state 42
Next token is token ';' ()
Reducing stack by rule 53 (line 147):
   $1 = nterm term ()
   $2 = nterm extraterm ()
-> $$ = nterm simpexpr ()
Stack now 0 1 9 11 12 15 30 47 88 71
Entering state 25
Next token is token ';' ()
Reducing stack by rule 44 (line 134):
   $1 = nterm simpexpr ()
-> $$ = nterm expr ()
Stack now 0 1 9 11 12 15 30 47 88 71
Entering state 24
Reducing stack by rule 43 (line 131):
   $1 = nterm expr ()
-> $$ = nterm assignment ()
Stack now 0 1 9 11 12 15 30 47 88 71
Entering state 102
Reducing stack by rule 32 (line 110):
   $1 = token "return" ()
   $2 = nterm assignment ()
-> $$ = nterm returnstatement ()
Stack now 0 1 9 11 12 15 30 47 88
Entering state 82
Next token is token ';' ()
Shifting token ';' ()
Entering state 107
Reducing stack by rule 19 (line 87):
   $1 = nterm returnstatement ()
   $2 = token ';' ()
-> $$ = nterm statement ()
Stack now 0 1 9 11 12 15 30 47 88
Entering state 77
Reducing stack by rule 15 (line 81):
   $1 = nterm statement ()
-> $$ = nterm block ()
Stack now 0 1 9 11 12 15 30 47 88
Entering state 76
Reducing stack by rule 13 (line 77):
   $1 = nterm statementlist ()
   $2 = nterm block ()
-> $$ = nterm statementlist ()
Stack now 0 1 9 11 12 15 30 47
Entering state 88
Reading a token: Next token is token '}' ()
Shifting token '}' ()
Entering state 113
Reducing stack by rule 4 (line 60):
   $1 = nterm type ()
   $2 = nterm id ()
   $3 = token '(' ()
   $4 = nterm parameterdefinition ()
   $5 = token ')' ()
   $6 = token '{' ()
   $7 = nterm statementlist ()
   $8 = token '}' ()
-> $$ = nterm functiondefinition ()
Stack now 0 1
Entering state 7
Reducing stack by rule 3 (line 57):
   $1 = nterm program ()
   $2 = nterm functiondefinition ()
-> $$ = nterm program ()
Stack now 0
Entering state 1
Reading a token: Next token is token "bool" ()
Shifting token "bool" ()
Entering state 3
Reducing stack by rule 37 (line 121):
   $1 = token "bool" ()
-> $$ = nterm type ()
Stack now 0 1
Entering state 9
Reading a token: Next token is token "identifier" ()
Shifting token "identifier" ()
Entering state 10
Reducing stack by rule 69 (line 173):
   $1 = token "identifier" ()
-> $$ = nterm id ()
Stack now 0 1 9
Entering state 11
Reading a token: Next token is token '(' ()
Shifting token '(' ()
Entering state 12
Reading a token: Next token is token "bool" ()
Shifting token "bool" ()
Entering state 3
Reducing stack by rule 37 (line 121):
   $1 = token "bool" ()
-> $$ = nterm type ()
Stack now 0 1 9 11 12
Entering state 16
Reading a token: Next token is token "identifier" ()
Shifting token "identifier" ()
Entering state 10
Reducing stack by rule 69 (line 173):
   $1 = token "identifier" ()
-> $$ = nterm id ()
Stack now 0 1 9 11 12 16
Entering state 31
Reading a token: Next token is token ',' ()
Shifting token ',' ()
Entering state 48
Reading a token: Next token is token "bool" ()
Shifting token "bool" ()
Entering state 3
Reducing stack by rule 37 (line 121):
   $1 = token "bool" ()
-> $$ = nterm type ()
Stack now 0 1 9 11 12 16 31 48
Entering state 16
Reading a token: Next token is token "identifier" ()
Shifting token "identifier" ()
Entering state 10
Reducing stack by rule 69 (line 173):
   $1 = token "identifier" ()
-> $$ = nterm id ()
Stack now 0 1 9 11 12 16 31 48 16
Entering state 31
Reading a token: Next token is token ')' ()
Reducing stack by rule 6 (line 64):
   $1 = nterm type ()
   $2 = nterm id ()
-> $$ = nterm parameterdefinition ()
Stack now 0 1 9 11 12 16 31 48
Entering state 89
Reducing stack by rule 7 (line 65):
   $1 = nterm type ()
   $2 = nterm id ()
   $3 = token ',' ()
   $4 = nterm parameterdefinition ()
-> $$ = nterm parameterdefinition ()
Stack now 0 1 9 11 12
Entering state 15
Next token is token ')' ()
Shifting token ')' ()
Entering state 30
Reading a token: Next token is token '{' ()
Shifting token '{' ()
Entering state 47
Reducing stack by rule 12 (line 76):
-> $$ = nterm statementlist ()
Stack now 0 1 9 11 12 15 30 47
Entering state 88
Reading a token: Next token is token "return" ()
Shifting token "return" ()
Entering state 71
Reading a token: Next token is token "identifier" ()
Shifting token "identifier" ()
Entering state 10
Reducing stack by rule 69 (line 173):
   $1 = token "identifier" ()
-> $$ = nterm id ()
Stack now 0 1 9 11 12 15 30 47 88 71
Entering state 28
Reading a token: Next token is token '(' ()
Shifting token '(' ()
Entering state 44
Reading a token: Next token is token "identifier" ()
Shifting token "identifier" ()
Entering state 10
Reducing stack by rule 69 (line 173):
   $1 = token "identifier" ()
-> $$ = nterm id ()
Stack now 0 1 9 11 12 15 30 47 88 71 28 44
Entering state 28
Reading a token: Next token is token ')' ()
Reducing stack by rule 67 (line 169):
   $1 = nterm id ()
-> $$ = nterm factor ()
Stack now 0 1 9 11 12 15 30 47 88 71 28 44
Entering state 27
Reducing stack by rule 59 (line 159):
-> $$ = nterm extrafactor ()
Stack now 0 1 9 11 12 15 30 47 88 71 28 44 27
Entering state 43
Next token is token ')' ()
Reducing stack by rule 58 (line 156):
   $1 = nterm factor ()
   $2 = nterm extrafactor ()
-> $$ = nterm term ()
Stack now 0 1 9 11 12 15 30 47 88 71 28 44
Entering state 26
Reducing stack by rule 54 (line 150):
-> $$ = nterm extraterm ()
Stack now 0 1 9 11 12 15 30 47 88 71 28 44 26
Entering state 42
Next token is token ')' ()
Reducing stack by rule 53 (line 147):
   $1 = nterm term ()
   $2 = nterm extraterm ()
-> $$ = nterm simpexpr ()
Stack now 0 1 9 11 12 15 30 47 88 71 28 44
Entering state 25
Next token is token ')' ()
Reducing stack by rule 44 (line 134):
   $1 = nterm simpexpr ()
-> $$ = nterm expr ()
Stack now 0 1 9 11 12 15 30 47 88 71 28 44
Entering state 24
Reducing stack by rule 43 (line 131):
   $1 = nterm expr ()
-> $$ = nterm assignment ()
Stack now 0 1 9 11 12 15 30 47 88 71 28 44
Entering state 65
Next token is token ')' ()
Reducing stack by rule 10 (line 72):
   $1 = nterm assignment ()
-> $$ = nterm parameterlist ()
Stack now 0 1 9 11 12 15 30 47 88 71 28 44
Entering state 64
Next token is token ')' ()
Shifting token ')' ()
Entering state 96
Reducing stack by rule 9 (line 69):
   $1 = nterm id ()
   $2 = token '(' ()
   $3 = nterm parameterlist ()
   $4 = token ')' ()
-> $$ = nterm functioncall ()
Stack now 0 1 9 11 12 15 30 47 88 71
Entering state 22
Reducing stack by rule 66 (line 168):
   $1 = nterm functioncall ()
-> $$ = nterm factor ()
Stack now 0 1 9 11 12 15 30 47 88 71
Entering state 27
Reducing stack by rule 59 (line 159):
-> $$ = nterm extrafactor ()
Stack now 0 1 9 11 12 15 30 47 88 71 27
Entering state 43
Reading a token: Next token is token "||" ()
Reducing stack by rule 58 (line 156):
   $1 = nterm factor ()
   $2 = nterm extrafactor ()
-> $$ = nterm term ()
Stack now 0 1 9 11 12 15 30 47 88 71
Entering state 26
Reducing stack by rule 54 (line 150):
-> $$ = nterm extraterm ()
Stack now 0 1 9 11 12 15 30 47 88 71 26
Entering state 42
Next token is token "||" ()
Shifting token "||" ()
Entering state 59
Reading a token: Next token is token "identifier" ()
Shifting token "identifier" ()
Entering state 10
Reducing stack by rule 69 (line 173):
   $1 = token "identifier" ()
-> $$ = nterm id ()
Stack now 0 1 9 11 12 15 30 47 88 71 26 42 59
Entering state 33
Reading a token: Next token is token '(' ()
Shifting token '(' ()
Entering state 44
Reading a token: Next token is token "identifier" ()
Shifting token "identifier" ()
Entering state 10
Reducing stack by rule 69 (line 173):
   $1 = token "identifier" ()
-> $$ = nterm id ()
Stack now 0 1 9 11 12 15 30 47 88 71 26 42 59 33 44
Entering state 28
Reading a token: Next token is token ')' ()
Reducing stack by rule 67 (line 169):
   $1 = nterm id ()
-> $$ = nterm factor ()
Stack now 0 1 9 11 12 15 30 47 88 71 26 42 59 33 44
Entering state 27
Reducing stack by rule 59 (line 159):
-> $$ = nterm extrafactor ()
Stack now 0 1 9 11 12 15 30 47 88 71 26 42 59 33 44 27
Entering state 43
Next token is token ')' ()
Reducing stack by rule 58 (line 156):
   $1 = nterm factor ()
   $2 = nterm extrafactor ()
-> $$ = nterm term ()
Stack now 0 1 9 11 12 15 30 47 88 71 26 42 59 33 44
Entering state 26
Reducing stack by rule 54 (line 150):
-> $$ = nterm extraterm ()
Stack now 0 1 9 11 12 15 30 47 88 71 26 42 59 33 44 26
Entering state 42
Next token is token ')' ()
Reducing stack by rule 53 (line 147):
   $1 = nterm term ()
   $2 = nterm extraterm ()
-> $$ = nterm simpexpr ()
Stack now 0 1 9 11 12 15 30 47 88 71 26 42 59 33 44
Entering state 25
Next token is token ')' ()
Reducing stack by rule 44 (line 134):
   $1 = nterm simpexpr ()
-> $$ = nterm expr ()
Stack now 0 1 9 11 12 15 30 47 88 71 26 42 59 33 44
Entering state 24
Reducing stack by rule 43 (line 131):
   $1 = nterm expr ()
-> $$ = nterm assignment ()
Stack now 0 1 9 11 12 15 30 47 88 71 26 42 59 33 44
Entering state 65
Next token is token ')' ()
Reducing stack by rule 10 (line 72):
   $1 = nterm assignment ()
-> $$ = nterm parameterlist ()
Stack now 0 1 9 11 12 15 30 47 88 71 26 42 59 33 44
Entering state 64
Next token is token ')' ()
Shifting token ')' ()
Entering state 96
Reducing stack by rule 9 (line 69):
   $1 = nterm id ()
   $2 = token '(' ()
   $3 = nterm parameterlist ()
   $4 = token ')' ()
-> $$ = nterm functioncall ()
Stack now 0 1 9 11 12 15 30 47 88 71 26 42 59
Entering state 22
Reducing stack by rule 66 (line 168):
   $1 = nterm functioncall ()
-> $$ = nterm factor ()
Stack now 0 1 9 11 12 15 30 47 88 71 26 42 59
Entering state 27
Reducing stack by rule 59 (line 159):
-> $$ = nterm extrafactor ()
Stack now 0 1 9 11 12 15 30 47 88 71 26 42 59 27
Entering state 43
Reading a token: Next token is token ';' ()
Reducing stack by rule 58 (line 156):
   $1 = nterm factor ()
   $2 = nterm extrafactor ()
-> $$ = nterm term ()
Stack now 0 1 9 11 12 15 30 47 88 71 26 42 59
Entering state 92
Reducing stack by rule 57 (line 153):
   $1 = nterm extraterm ()
   $2 = token "||" ()
   $3 = nterm term ()
-> $$ = nterm extraterm ()
Stack now 0 1 9 11 12 15 30 47 88 71 26
Entering state 42
Next token is token ';' ()
Reducing stack by rule 53 (line 147):
   $1 = nterm term ()
   $2 = nterm extraterm ()
-> $$ = nterm simpexpr ()
Stack now 0 1 9 11 12 15 30 47 88 71
Entering state 25
Next token is token ';' ()
Reducing stack by rule 44 (line 134):
   $1 = nterm simpexpr ()
-> $$ = nterm expr ()
Stack now 0 1 9 11 12 15 30 47 88 71
Entering state 24
Reducing stack by rule 43 (line 131):
   $1 = nterm expr ()
-> $$ = nterm assignment ()
Stack now 0 1 9 11 12 15 30 47 88 71
Entering state 102
Reducing stack by rule 32 (line 110):
   $1 = token "return" ()
   $2 = nterm assignment ()
-> $$ = nterm returnstatement ()
Stack now 0 1 9 11 12 15 30 47 88
Entering state 82
Next token is token ';' ()
Shifting token ';' ()
Entering state 107
Reducing stack by rule 19 (line 87):
   $1 = nterm returnstatement ()
   $2 = token ';' ()
-> $$ = nterm statement ()
Stack now 0 1 9 11 12 15 30 47 88
Entering state 77
Reducing stack by rule 15 (line 81):
   $1 = nterm statement ()
-> $$ = nterm block ()
Stack now 0 1 9 11 12 15 30 47 88
Entering state 76
Reducing stack by rule 13 (line 77):
   $1 = nterm statementlist ()
   $2 = nterm block ()
-> $$ = nterm statementlist ()
Stack now 0 1 9 11 12 15 30 47
Entering state 88
Reading a token: Next token is token '}' ()
Shifting token '}' ()
Entering state 113
Reducing stack by rule 4 (line 60):
   $1 = nterm type ()
   $2 = nterm id ()
   $3 = token '(' ()
   $4 = nterm parameterdefinition ()
   $5 = token ')' ()
   $6 = token '{' ()
   $7 = nterm statementlist ()
   $8 = token '}' ()
-> $$ = nterm functiondefinition ()
Stack now 0 1
Entering state 7
Reducing stack by rule 3 (line 57):
   $1 = nterm program ()
   $2 = nterm functiondefinition ()
-> $$ = nterm program ()
Stack now 0
Entering state 1
Reading a token: Next token is token "void" ()
Shifting token "void" ()
Entering state 6
Reducing stack by rule 40 (line 124):
   $1 = token "void" ()
-> $$ = nterm type ()
Stack now 0 1
Entering state 9
Reading a token: Next token is token "identifier" ()
Shifting token "identifier" ()
Entering state 10
Reducing stack by rule 69 (line 173):
   $1 = token "identifier" ()
-> $$ = nterm id ()
Stack now 0 1 9
Entering state 11
Reading a token: Next token is token '(' ()
Shifting token '(' ()
Entering state 12
Reading a token: Next token is token ')' ()
Shifting token ')' ()
Entering state 14
Reading a token: Next token is token '{' ()
Shifting token '{' ()
Entering state 29
Reducing stack by rule 12 (line 76):
-> $$ = nterm statementlist ()
Stack now 0 1 9 11 12 14 29
Entering state 46
Reading a token: Next token is token "bool" ()
Shifting token "bool" ()
Entering state 3
Reducing stack by rule 37 (line 121):
   $1 = token "bool" ()
-> $$ = nterm type ()
Stack now 0 1 9 11 12 14 29 46
Entering state 85
Reading a token: Next token is token "identifier" ()
Shifting token "identifier" ()
Entering state 10
Reducing stack by rule 69 (line 173):
   $1 = token "identifier" ()
-> $$ = nterm id ()
Stack now 0 1 9 11 12 14 29 46 85
Entering state 110
Reading a token: Next token is token '=' ()
Shifting token '=' ()
Entering state 13
Reading a token: Next token is token "boolean literal" ()
Shifting token "boolean literal" ()
Entering state 20
Reducing stack by rule 65 (line 167):
   $1 = token "boolean literal" ()
-> $$ = nterm factor ()
Stack now 0 1 9 11 12 14 29 46 85 110 13
Entering state 27
Reducing stack by rule 59 (line 159):
-> $$ = nterm extrafactor ()
Stack now 0 1 9 11 12 14 29 46 85 110 13 27
Entering state 43
Reading a token: Next token is token ';' ()
Reducing stack by rule 58 (line 156):
   $1 = nterm factor ()
   $2 = nterm extrafactor ()
-> $$ = nterm term ()
Stack now 0 1 9 11 12 14 29 46 85 110 13
Entering state 26
Reducing stack by rule 54 (line 150):
-> $$ = nterm extraterm ()
Stack now 0 1 9 11 12 14 29 46 85 110 13 26
Entering state 42
Next token is token ';' ()
Reducing stack by rule 53 (line 147):
   $1 = nterm term ()
   $2 = nterm extraterm ()
-> $$ = nterm simpexpr ()
Stack now 0 1 9 11 12 14 29 46 85 110 13
Entering state 25
Next token is token ';' ()
Reducing stack by rule 44 (line 134):
   $1 = nterm simpexpr ()
-> $$ = nterm expr ()
Stack now 0 1 9 11 12 14 29 46 85 110 13
Entering state 24
Reducing stack by rule 43 (line 131):
   $1 = nterm expr ()
-> $$ = nterm assignment ()
Stack now 0 1 9 11 12 14 29 46 85 110 13
Entering state 23
Reducing stack by rule 36 (line 118):
   $1 = nterm type ()
   $2 = nterm id ()
   $3 = token '=' ()
   $4 = nterm assignment ()
-> $$ = nterm declassignment ()
Stack now 0 1 9 11 12 14 29 46
Entering state 84
Next token is token ';' ()
Shifting token ';' ()
Entering state 109
Reducing stack by rule 22 (line 90):
   $1 = nterm declassignment ()
   $2 = token ';' ()
-> $$ = nterm statement ()
Stack now 0 1 9 11 12 14 29 46
Entering state 77
Reducing stack by rule 15 (line 81):
   $1 = nterm statement ()
-> $$ = nterm block ()
Stack now 0 1 9 11 12 14 29 46
Entering state 76
Reducing stack by rule 13 (line 77):
   $1 = nterm statementlist ()
   $2 = nterm block ()
-> $$ = nterm statementlist ()
Stack now 0 1 9 11 12 14 29
Entering state 46
Reading a token: Next token is token "bool" ()
Shifting token "bool" ()
Entering state 3
Reducing stack by rule 37 (line 121):
   $1 = token "bool" ()
-> $$ = nterm type ()
Stack now 0 1 9 11 12 14 29 46
Entering state 85
Reading a token: Next token is token "identifier" ()
Shifting token "identifier" ()
Entering state 10
Reducing stack by rule 69 (line 173):
   $1 = token "identifier" ()
-> $$ = nterm id ()
Stack now 0 1 9 11 12 14 29 46 85
Entering state 110
Reading a token: Next token is token '=' ()
Shifting token '=' ()
Entering state 13
Reading a token: Next token is token "boolean literal" ()
Shifting token "boolean literal" ()
Entering state 20
Reducing stack by rule 65 (line 167):
   $1 = token "boolean literal" ()
-> $$ = nterm factor ()
Stack now 0 1 9 11 12 14 29 46 85 110 13
Entering state 27
Reducing stack by rule 59 (line 159):
-> $$ = nterm extrafactor ()
Stack now 0 1 9 11 12 14 29 46 85 110 13 27
Entering state 43
Reading a token: Next token is token ';' ()
Reducing stack by rule 58 (line 156):
   $1 = nterm factor ()
   $2 = nterm extrafactor ()
-> $$ = nterm term ()
Stack now 0 1 9 11 12 14 29 46 85 110 13
Entering state 26
Reducing stack by rule 54 (line 150):
-> $$ = nterm extraterm ()
Stack now 0 1 9 11 12 14 29 46 85 110 13 26
Entering state 42
Next token is token ';' ()
Reducing stack by rule 53 (line 147):
   $1 = nterm term ()
   $2 = nterm extraterm ()
-> $$ = nterm simpexpr ()
Stack now 0 1 9 11 12 14 29 46 85 110 13
Entering state 25
Next token is token ';' ()
Reducing stack by rule 44 (line 134):
   $1 = nterm simpexpr ()
-> $$ = nterm expr ()
Stack now 0 1 9 11 12 14 29 46 85 110 13
Entering state 24
Reducing stack by rule 43 (line 131):
   $1 = nterm expr ()
-> $$ = nterm assignment ()
Stack now 0 1 9 11 12 14 29 46 85 110 13
Entering state 23
Reducing stack by rule 36 (line 118):
   $1 = nterm type ()
   $2 = nterm id ()
   $3 = token '=' ()
   $4 = nterm assignment ()
-> $$ = nterm declassignment ()
Stack now 0 1 9 11 12 14 29 46
Entering state 84
Next token is token ';' ()
Shifting token ';' ()
Entering state 109
Reducing stack by rule 22 (line 90):
   $1 = nterm declassignment ()
   $2 = token ';' ()
-> $$ = nterm statement ()
Stack now 0 1 9 11 12 14 29 46
Entering state 77
Reducing stack by rule 15 (line 81):
   $1 = nterm statement ()
-> $$ = nterm block ()
Stack now 0 1 9 11 12 14 29 46
Entering state 76
Reducing stack by rule 13 (line 77):
   $1 = nterm statementlist ()
   $2 = nterm block ()
-> $$ = nterm statementlist ()
Stack now 0 1 9 11 12 14 29
Entering state 46
Reading a token: Next token is token "int" ()
Shifting token "int" ()
Entering state 5
Reducing stack by rule 39 (line 123):
   $1 = token "int" ()
-> $$ = nterm type ()
Stack now 0 1 9 11 12 14 29 46
Entering state 85
Reading a token: Next token is token "identifier" ()
Shifting token "identifier" ()
Entering state 10
Reducing stack by rule 69 (line 173):
   $1 = token "identifier" ()
-> $$ = nterm id ()
Stack now 0 1 9 11 12 14 29 46 85
Entering state 110
Reading a token: Next token is token '=' ()
Shifting token '=' ()
Entering state 13
Reading a token: Next token is token "integer literal" ()
Shifting token "integer literal" ()
Entering state 18
Reducing stack by rule 63 (line 165):
   $1 = token "integer literal" ()
-> $$ = nterm factor ()
Stack now 0 1 9 11 12 14 29 46 85 110 13
Entering state 27
Reducing stack by rule 59 (line 159):
-> $$ = nterm extrafactor ()
Stack now 0 1 9 11 12 14 29 46 85 110 13 27
Entering state 43
Reading a token: Next token is token ';' ()
Reducing stack by rule 58 (line 156):
   $1 = nterm factor ()
   $2 = nterm extrafactor ()
-> $$ = nterm term ()
Stack now 0 1 9 11 12 14 29 46 85 110 13
Entering state 26
Reducing stack by rule 54 (line 150):
-> $$ = nterm extraterm ()
Stack now 0 1 9 11 12 14 29 46 85 110 13 26
Entering state 42
Next token is token ';' ()
Reducing stack by rule 53 (line 147):
   $1 = nterm term ()
   $2 = nterm extraterm ()
-> $$ = nterm simpexpr ()
Stack now 0 1 9 11 12 14 29 46 85 110 13
Entering state 25
Next token is token ';' ()
Reducing stack by rule 44 (line 134):
   $1 = nterm simpexpr ()
-> $$ = nterm expr ()
Stack now 0 1 9 11 12 14 29 46 85 110 13
Entering state 24
Reducing stack by rule 43 (line 131):
   $1 = nterm expr ()
-> $$ = nterm assignment ()
Stack now 0 1 9 11 12 14 29 46 85 110 13
Entering state 23
Reducing stack by rule 36 (line 118):
   $1 = nterm type ()
   $2 = nterm id ()
   $3 = token '=' ()
   $4 = nterm assignment ()
-> $$ = nterm declassignment ()
Stack now 0 1 9 11 12 14 29 46
Entering state 84
Next token is token ';' ()
Shifting token ';' ()
Entering state 109
Reducing stack by rule 22 (line 90):
   $1 = nterm declassignment ()
   $2 = token ';' ()
-> $$ = nterm statement ()
Stack now 0 1 9 11 12 14 29 46
Entering state 77
Reducing stack by rule 15 (line 81):
   $1 = nterm statement ()
-> $$ = nterm block ()
Stack now 0 1 9 11 12 14 29 46
Entering state 76
Reducing stack by rule 13 (line 77):
   $1 = nterm statementlist ()
   $2 = nterm block ()
-> $$ = nterm statementlist ()
Stack now 0 1 9 11 12 14 29
Entering state 46
Reading a token: Next token is token "printf" ()
Shifting token "printf" ()
Entering state 70
Reading a token: Next token is token '(' ()
Shifting token '(' ()
Entering state 101
Reading a token: Next token is token "string literal" ()
Shifting token "string literal" ()
Entering state 120
Reading a token: Next token is token ')' ()
Shifting token ')' ()
Entering state 129
Reducing stack by rule 34 (line 114):
   $1 = token "printf" ()
   $2 = token '(' ()
   $3 = token "string literal" ()
   $4 = token ')' ()
-> $$ = nterm printf ()
Stack now 0 1 9 11 12 14 29 46
Entering state 83
Reading a token: Next token is token ';' ()
Shifting token ';' ()
Entering state 108
Reducing stack by rule 21 (line 89):
   $1 = nterm printf ()
   $2 = token ';' ()
-> $$ = nterm statement ()
Stack now 0 1 9 11 12 14 29 46
Entering state 77
Reducing stack by rule 15 (line 81):
   $1 = nterm statement ()
-> $$ = nterm block ()
Stack now 0 1 9 11 12 14 29 46
Entering state 76
Reducing stack by rule 13 (line 77):
   $1 = nterm statementlist ()
   $2 = nterm block ()
-> $$ = nterm statementlist ()
Stack now 0 1 9 11 12 14 29
Entering state 46
Reading a token: Next token is token "do" ()
Shifting token "do" ()
Entering state 67
Reading a token: Next token is token '{' ()
Shifting token '{' ()
Entering state 73
Reducing stack by rule 12 (line 76):
-> $$ = nterm statementlist ()
Stack now 0 1 9 11 12 14 29 46 67 73
Entering state 104
Reading a token: Next token is token "do" ()
Shifting token "do" ()
Entering state 67
Reading a token: Next token is token '{' ()
Shifting token '{' ()
Entering state 73
Reducing stack by rule 12 (line 76):
-> $$ = nterm statementlist ()
Stack now 0 1 9 11 12 14 29 46 67 73 104 67 73
Entering state 104
Reading a token: Next token is token "printf" ()
Shifting token "printf" ()
Entering state 70
Reading a token: Next token is token '(' ()
Shifting token '(' ()
Entering state 101
Reading a token: Next token is token "identifier" ()
Shifting token "identifier" ()
Entering state 10
Reducing stack by rule 69 (line 173):
   $1 = token "identifier" ()
-> $$ = nterm id ()
Stack now 0 1 9 11 12 14 29 46 67 73 104 67 73 104 70 101
Entering state 28
Reading a token: Next token is token ')' ()
Reducing stack by rule 67 (line 169):
   $1 = nterm id ()
-> $$ = nterm factor ()
Stack now 0 1 9 11 12 14 29 46 67 73 104 67 73 104 70 101
Entering state 27
Reducing stack by rule 59 (line 159):
-> $$ = nterm extrafactor ()
Stack now 0 1 9 11 12 14 29 46 67 73 104 67 73 104 70 101 27
Entering state 43
Next token is token ')' ()
Reducing stack by rule 58 (line 156):
   $1 = nterm factor ()
   $2 = nterm extrafactor ()
-> $$ = nterm term ()
Stack now 0 1 9 11 12 14 29 46 67 73 104 67 73 104 70 101
Entering state 26
Reducing stack by rule 54 (line 150):
-> $$ = nterm extraterm ()
Stack now 0 1 9 11 12 14 29 46 67 73 104 67 73 104 70 101 26
Entering state 42
Next token is token ')' ()
Reducing stack by rule 53 (line 147):
   $1 = nterm term ()
   $2 = nterm extraterm ()
-> $$ = nterm simpexpr ()
Stack now 0 1 9 11 12 14 29 46 67 73 104 67 73 104 70 101
Entering state 25
Next token is token ')' ()
Reducing stack by rule 44 (line 134):
   $1 = nterm simpexpr ()
-> $$ = nterm expr ()
Stack now 0 1 9 11 12 14 29 46 67 73 104 67 73 104 70 101
Entering state 24
Reducing stack by rule 43 (line 131):
   $1 = nterm expr ()
-> $$ = nterm assignment ()
Stack now 0 1 9 11 12 14 29 46 67 73 104 67 73 104 70 101
Entering state 121
Next token is token ')' ()
Shifting token ')' ()
Entering state 130
Reducing stack by rule 33 (line 113):
   $1 = token "printf" ()
   $2 = token '(' ()
   $3 = nterm assignment ()
   $4 = token ')' ()
-> $$ = nterm printf ()
Stack now 0 1 9 11 12 14 29 46 67 73 104 67 73 104
Entering state 83
Reading a token: Next token is token ';' ()
Shifting token ';' ()
Entering state 108
Reducing stack by rule 21 (line 89):
   $1 = nterm printf ()
   $2 = token ';' ()
-> $$ = nterm statement ()
Stack now 0 1 9 11 12 14 29 46 67 73 104 67 73 104
Entering state 77
Reducing stack by rule 15 (line 81):
   $1 = nterm statement ()
-> $$ = nterm block ()
Stack now 0 1 9 11 12 14 29 46 67 73 104 67 73 104
Entering state 76
Reducing stack by rule 13 (line 77):
   $1 = nterm statementlist ()
   $2 = nterm block ()
-> $$ = nterm statementlist ()
Stack now 0 1 9 11 12 14 29 46 67 73 104 67 73
Entering state 104
Reading a token: Next token is token "printf" ()
Shifting token "printf" ()
Entering state 70
Reading a token: Next token is token '(' ()
Shifting token '(' ()
Entering state 101
Reading a token: Next token is token "identifier" ()
Shifting token "identifier" ()
Entering state 10
Reducing stack by rule 69 (line 173):
   $1 = token "identifier" ()
-> $$ = nterm id ()
Stack now 0 1 9 11 12 14 29 46 67 73 104 67 73 104 70 101
Entering state 28
Reading a token: Next token is token '(' ()
Shifting token '(' ()
Entering state 44
Reading a token: Next token is token "identifier" ()
Shifting token "identifier" ()
Entering state 10
Reducing stack by rule 69 (line 173):
   $1 = token "identifier" ()
-> $$ = nterm id ()
Stack now 0 1 9 11 12 14 29 46 67 73 104 67 73 104 70 101 28 44
Entering state 28
Reading a token: Next token is token ',' ()
Reducing stack by rule 67 (line 169):
   $1 = nterm id ()
-> $$ = nterm factor ()
Stack now 0 1 9 11 12 14 29 46 67 73 104 67 73 104 70 101 28 44
Entering state 27
Reducing stack by rule 59 (line 159):
-> $$ = nterm extrafactor ()
Stack now 0 1 9 11 12 14 29 46 67 73 104 67 73 104 70 101 28 44 27
Entering state 43
Next token is token ',' ()
Reducing stack by rule 58 (line 156):
   $1 = nterm factor ()
   $2 = nterm extrafactor ()
-> $$ = nterm term ()
Stack now 0 1 9 11 12 14 29 46 67 73 104 67 73 104 70 101 28 44
Entering state 26
Reducing stack by rule 54 (line 150):
-> $$ = nterm extraterm ()
Stack now 0 1 9 11 12 14 29 46 67 73 104 67 73 104 70 101 28 44 26
Entering state 42
Next token is token ',' ()
Reducing stack by rule 53 (line 147):
   $1 = nterm term ()
   $2 = nterm extraterm ()
-> $$ = nterm simpexpr ()
Stack now 0 1 9 11 12 14 29 46 67 73 104 67 73 104 70 101 28 44
Entering state 25
Next token is token ',' ()
Reducing stack by rule 44 (line 134):
   $1 = nterm simpexpr ()
-> $$ = nterm expr ()
Stack now 0 1 9 11 12 14 29 46 67 73 104 67 73 104 70 101 28 44
Entering state 24
Reducing stack by rule 43 (line 131):
   $1 = nterm expr ()
-> $$ = nterm assignment ()
Stack now 0 1 9 11 12 14 29 46 67 73 104 67 73 104 70 101 28 44
Entering state 65
Next token is token ',' ()
Shifting token ',' ()
Entering state 97
Reading a token: Next token is token "identifier" ()
Shifting token "identifier" ()
Entering state 10
Reducing stack by rule 69 (line 173):
   $1 = token "identifier" ()
-> $$ = nterm id ()
Stack now 0 1 9 11 12 14 29 46 67 73 104 67 73 104 70 101 28 44 65 97
Entering state 28
Reading a token: Next token is token ')' ()
Reducing stack by rule 67 (line 169):
   $1 = nterm id ()
-> $$ = nterm factor ()
Stack now 0 1 9 11 12 14 29 46 67 73 104 67 73 104 70 101 28 44 65 97
Entering state 27
Reducing stack by rule 59 (line 159):
-> $$ = nterm extrafactor ()
Stack now 0 1 9 11 12 14 29 46 67 73 104 67 73 104 70 101 28 44 65 97 27
Entering state 43
Next token is token ')' ()
Reducing stack by rule 58 (line 156):
   $1 = nterm factor ()
   $2 = nterm extrafactor ()
-> $$ = nterm term ()
Stack now 0 1 9 11 12 14 29 46 67 73 104 67 73 104 70 101 28 44 65 97
Entering state 26
Reducing stack by rule 54 (line 150):
-> $$ = nterm extraterm ()
Stack now 0 1 9 11 12 14 29 46 67 73 104 67 73 104 70 101 28 44 65 97 26
Entering state 42
Next token is token ')' ()
Reducing stack by rule 53 (line 147):
   $1 = nterm term ()
   $2 = nterm extraterm ()
-> $$ = nterm simpexpr ()
Stack now 0 1 9 11 12 14 29 46 67 73 104 67 73 104 70 101 28 44 65 97
Entering state 25
Next token is token ')' ()
Reducing stack by rule 44 (line 134):
   $1 = nterm simpexpr ()
-> $$ = nterm expr ()
Stack now 0 1 9 11 12 14 29 46 67 73 104 67 73 104 70 101 28 44 65 97
Entering state 24
Reducing stack by rule 43 (line 131):
   $1 = nterm expr ()
-> $$ = nterm assignment ()
Stack now 0 1 9 11 12 14 29 46 67 73 104 67 73 104 70 101 28 44 65 97
Entering state 65
Next token is token ')' ()
Reducing stack by rule 10 (line 72):
   $1 = nterm assignment ()
-> $$ = nterm parameterlist ()
Stack now 0 1 9 11 12 14 29 46 67 73 104 67 73 104 70 101 28 44 65 97
Entering state 114
Reducing stack by rule 11 (line 73):
   $1 = nterm assignment ()
   $2 = token ',' ()
   $3 = nterm parameterlist ()
-> $$ = nterm parameterlist ()
Stack now 0 1 9 11 12 14 29 46 67 73 104 67 73 104 70 101 28 44
Entering state 64
Next token is token ')' ()
Shifting token ')' ()
Entering state 96
Reducing stack by rule 9 (line 69):
   $1 = nterm id ()
   $2 = token '(' ()
   $3 = nterm parameterlist ()
   $4 = token ')' ()
-> $$ = nterm functioncall ()
Stack now 0 1 9 11 12 14 29 46 67 73 104 67 73 104 70 101
Entering state 22
Reducing stack by rule 66 (line 168):
   $1 = nterm functioncall ()
-> $$ = nterm factor ()
Stack now 0 1 9 11 12 14 29 46 67 73 104 67 73 104 70 101
Entering state 27
Reducing stack by rule 59 (line 159):
-> $$ = nterm extrafactor ()
Stack now 0 1 9 11 12 14 29 46 67 73 104 67 73 104 70 101 27
Entering state 43
Reading a token: Next token is token ')' ()
Reducing stack by rule 58 (line 156):
   $1 = nterm factor ()
   $2 = nterm extrafactor ()
-> $$ = nterm term ()
Stack now 0 1 9 11 12 14 29 46 67 73 104 67 73 104 70 101
Entering state 26
Reducing stack by rule 54 (line 150):
-> $$ = nterm extraterm ()
Stack now 0 1 9 11 12 14 29 46 67 73 104 67 73 104 70 101 26
Entering state 42
Next token is token ')' ()
Reducing stack by rule 53 (line 147):
   $1 = nterm term ()
   $2 = nterm extraterm ()
-> $$ = nterm simpexpr ()
Stack now 0 1 9 11 12 14 29 46 67 73 104 67 73 104 70 101
Entering state 25
Next token is token ')' ()
Reducing stack by rule 44 (line 134):
   $1 = nterm simpexpr ()
-> $$ = nterm expr ()
Stack now 0 1 9 11 12 14 29 46 67 73 104 67 73 104 70 101
Entering state 24
Reducing stack by rule 43 (line 131):
   $1 = nterm expr ()
-> $$ = nterm assignment ()
Stack now 0 1 9 11 12 14 29 46 67 73 104 67 73 104 70 101
Entering state 121
Next token is token ')' ()
Shifting token ')' ()
Entering state 130
Reducing stack by rule 33 (line 113):
   $1 = token "printf" ()
   $2 = token '(' ()
   $3 = nterm assignment ()
   $4 = token ')' ()
-> $$ = nterm printf ()
Stack now 0 1 9 11 12 14 29 46 67 73 104 67 73 104
Entering state 83
Reading a token: Next token is token ';' ()
Shifting token ';' ()
Entering state 108
Reducing stack by rule 21 (line 89):
   $1 = nterm printf ()
   $2 = token ';' ()
-> $$ = nterm statement ()
Stack now 0 1 9 11 12 14 29 46 67 73 104 67 73 104
Entering state 77
Reducing stack by rule 15 (line 81):
   $1 = nterm statement ()
-> $$ = nterm block ()
Stack now 0 1 9 11 12 14 29 46 67 73 104 67 73 104
Entering state 76
Reducing stack by rule 13 (line 77):
   $1 = nterm statementlist ()
   $2 = nterm block ()
-> $$ = nterm statementlist ()
Stack now 0 1 9 11 12 14 29 46 67 73 104 67 73
Entering state 104
Reading a token: Next token is token "printf" ()
Shifting token "printf" ()
Entering state 70
Reading a token: Next token is token '(' ()
Shifting token '(' ()
Entering state 101
Reading a token: Next token is token "identifier" ()
Shifting token "identifier" ()
Entering state 10
Reducing stack by rule 69 (line 173):
   $1 = token "identifier" ()
-> $$ = nterm id ()
Stack now 0 1 9 11 12 14 29 46 67 73 104 67 73 104 70 101
Entering state 28
Reading a token: Next token is token '(' ()
Shifting token '(' ()
Entering state 44
Reading a token: Next token is token "identifier" ()
Shifting token "identifier" ()
Entering state 10
Reducing stack by rule 69 (line 173):
   $1 = token "identifier" ()
-> $$ = nterm id ()
Stack now 0 1 9 11 12 14 29 46 67 73 104 67 73 104 70 101 28 44
Entering state 28
Reading a token: Next token is token ',' ()
Reducing stack by rule 67 (line 169):
   $1 = nterm id ()
-> $$ = nterm factor ()
Stack now 0 1 9 11 12 14 29 46 67 73 104 67 73 104 70 101 28 44
Entering state 27
Reducing stack by rule 59 (line 159):
-> $$ = nterm extrafactor ()
Stack now 0 1 9 11 12 14 29 46 67 73 104 67 73 104 70 101 28 44 27
Entering state 43
Next token is token ',' ()
Reducing stack by rule 58 (line 156):
   $1 = nterm factor ()
   $2 = nterm extrafactor ()
-> $$ = nterm term ()
Stack now 0 1 9 11 12 14 29 46 67 73 104 67 73 104 70 101 28 44
Entering state 26
Reducing stack by rule 54 (line 150):
-> $$ = nterm extraterm ()
Stack now 0 1 9 11 12 14 29 46 67 73 104 67 73 104 70 101 28 44 26
Entering state 42
Next token is token ',' ()
Reducing stack by rule 53 (line 147):
   $1 = nterm term ()
   $2 = nterm extraterm ()
-> $$ = nterm simpexpr ()
Stack now 0 1 9 11 12 14 29 46 67 73 104 67 73 104 70 101 28 44
Entering state 25
Next token is token ',' ()
Reducing stack by rule 44 (line 134):
   $1 = nterm simpexpr ()
-> $$ = nterm expr ()
Stack now 0 1 9 11 12 14 29 46 67 73 104 67 73 104 70 101 28 44
Entering state 24
Reducing stack by rule 43 (line 131):
   $1 = nterm expr ()
-> $$ = nterm assignment ()
Stack now 0 1 9 11 12 14 29 46 67 73 104 67 73 104 70 101 28 44
Entering state 65
Next token is token ',' ()
Shifting token ',' ()
Entering state 97
Reading a token: Next token is token "identifier" ()
Shifting token "identifier" ()
Entering state 10
Reducing stack by rule 69 (line 173):
   $1 = token "identifier" ()
-> $$ = nterm id ()
Stack now 0 1 9 11 12 14 29 46 67 73 104 67 73 104 70 101 28 44 65 97
Entering state 28
Reading a token: Next token is token ')' ()
Reducing stack by rule 67 (line 169):
   $1 = nterm id ()
-> $$ = nterm factor ()
Stack now 0 1 9 11 12 14 29 46 67 73 104 67 73 104 70 101 28 44 65 97
Entering state 27
Reducing stack by rule 59 (line 159):
-> $$ = nterm extrafactor ()
Stack now 0 1 9 11 12 14 29 46 67 73 104 67 73 104 70 101 28 44 65 97 27
Entering state 43
Next token is token ')' ()
Reducing stack by rule 58 (line 156):
   $1 = nterm factor ()
   $2 = nterm extrafactor ()
-> $$ = nterm term ()
Stack now 0 1 9 11 12 14 29 46 67 73 104 67 73 104 70 101 28 44 65 97
Entering state 26
Reducing stack by rule 54 (line 150):
-> $$ = nterm extraterm ()
Stack now 0 1 9 11 12 14 29 46 67 73 104 67 73 104 70 101 28 44 65 97 26
Entering state 42
Next token is token ')' ()
Reducing stack by rule 53 (line 147):
   $1 = nterm term ()
   $2 = nterm extraterm ()
-> $$ = nterm simpexpr ()
Stack now 0 1 9 11 12 14 29 46 67 73 104 67 73 104 70 101 28 44 65 97
Entering state 25
Next token is token ')' ()
Reducing stack by rule 44 (line 134):
   $1 = nterm simpexpr ()
-> $$ = nterm expr ()
Stack now 0 1 9 11 12 14 29 46 67 73 104 67 73 104 70 101 28 44 65 97
Entering state 24
Reducing stack by rule 43 (line 131):
   $1 = nterm expr ()
-> $$ = nterm assignment ()
Stack now 0 1 9 11 12 14 29 46 67 73 104 67 73 104 70 101 28 44 65 97
Entering state 65
Next token is token ')' ()
Reducing stack by rule 10 (line 72):
   $1 = nterm assignment ()
-> $$ = nterm parameterlist ()
Stack now 0 1 9 11 12 14 29 46 67 73 104 67 73 104 70 101 28 44 65 97
Entering state 114
Reducing stack by rule 11 (line 73):
   $1 = nterm assignment ()
   $2 = token ',' ()
   $3 = nterm parameterlist ()
-> $$ = nterm parameterlist ()
Stack now 0 1 9 11 12 14 29 46 67 73 104 67 73 104 70 101 28 44
Entering state 64
Next token is token ')' ()
Shifting token ')' ()
Entering state 96
Reducing stack by rule 9 (line 69):
   $1 = nterm id ()
   $2 = token '(' ()
   $3 = nterm parameterlist ()
   $4 = token ')' ()
-> $$ = nterm functioncall ()
Stack now 0 1 9 11 12 14 29 46 67 73 104 67 73 104 70 101
Entering state 22
Reducing stack by rule 66 (line 168):
   $1 = nterm functioncall ()
-> $$ = nterm factor ()
Stack now 0 1 9 11 12 14 29 46 67 73 104 67 73 104 70 101
Entering state 27
Reducing stack by rule 59 (line 159):
-> $$ = nterm extrafactor ()
Stack now 0 1 9 11 12 14 29 46 67 73 104 67 73 104 70 101 27
Entering state 43
Reading a token: Next token is token ')' ()
Reducing stack by rule 58 (line 156):
   $1 = nterm factor ()
   $2 = nterm extrafactor ()
-> $$ = nterm term ()
Stack now 0 1 9 11 12 14 29 46 67 73 104 67 73 104 70 101
Entering state 26
Reducing stack by rule 54 (line 150):
-> $$ = nterm extraterm ()
Stack now 0 1 9 11 12 14 29 46 67 73 104 67 73 104 70 101 26
Entering state 42
Next token is token ')' ()
Reducing stack by rule 53 (line 147):
   $1 = nterm term ()
   $2 = nterm extraterm ()
-> $$ = nterm simpexpr ()
Stack now 0 1 9 11 12 14 29 46 67 73 104 67 73 104 70 101
Entering state 25
Next token is token ')' ()
Reducing stack by rule 44 (line 134):
   $1 = nterm simpexpr ()
-> $$ = nterm expr ()
Stack now 0 1 9 11 12 14 29 46 67 73 104 67 73 104 70 101
Entering state 24
Reducing stack by rule 43 (line 131):
   $1 = nterm expr ()
-> $$ = nterm assignment ()
Stack now 0 1 9 11 12 14 29 46 67 73 104 67 73 104 70 101
Entering state 121
Next token is token ')' ()
Shifting token ')' ()
Entering state 130
Reducing stack by rule 33 (line 113):
   $1 = token "printf" ()
   $2 = token '(' ()
   $3 = nterm assignment ()
   $4 = token ')' ()
-> $$ = nterm printf ()
Stack now 0 1 9 11 12 14 29 46 67 73 104 67 73 104
Entering state 83
Reading a token: Next token is token ';' ()
Shifting token ';' ()
Entering state 108
Reducing stack by rule 21 (line 89):
   $1 = nterm printf ()
   $2 = token ';' ()
-> $$ = nterm statement ()
Stack now 0 1 9 11 12 14 29 46 67 73 104 67 73 104
Entering state 77
Reducing stack by rule 15 (line 81):
   $1 = nterm statement ()
-> $$ = nterm block ()
Stack now 0 1 9 11 12 14 29 46 67 73 104 67 73 104
Entering state 76
Reducing stack by rule 13 (line 77):
   $1 = nterm statementlist ()
   $2 = nterm block ()
-> $$ = nterm statementlist ()
Stack now 0 1 9 11 12 14 29 46 67 73 104 67 73
Entering state 104
Reading a token: Next token is token "printf" ()
Shifting token "printf" ()
Entering state 70
Reading a token: Next token is token '(' ()
Shifting token '(' ()
Entering state 101
Reading a token: Next token is token "identifier" ()
Shifting token "identifier" ()
Entering state 10
Reducing stack by rule 69 (line 173):
   $1 = token "identifier" ()
-> $$ = nterm id ()
Stack now 0 1 9 11 12 14 29 46 67 73 104 67 73 104 70 101
Entering state 28
Reading a token: Next token is token '(' ()
Shifting token '(' ()
Entering state 44
Reading a token: Next token is token "identifier" ()
Shifting token "identifier" ()
Entering state 10
Reducing stack by rule 69 (line 173):
   $1 = token "identifier" ()
-> $$ = nterm id ()
Stack now 0 1 9 11 12 14 29 46 67 73 104 67 73 104 70 101 28 44
Entering state 28
Reading a token: Next token is token ',' ()
Reducing stack by rule 67 (line 169):
   $1 = nterm id ()
-> $$ = nterm factor ()
Stack now 0 1 9 11 12 14 29 46 67 73 104 67 73 104 70 101 28 44
Entering state 27
Reducing stack by rule 59 (line 159):
-> $$ = nterm extrafactor ()
Stack now 0 1 9 11 12 14 29 46 67 73 104 67 73 104 70 101 28 44 27
Entering state 43
Next token is token ',' ()
Reducing stack by rule 58 (line 156):
   $1 = nterm factor ()
   $2 = nterm extrafactor ()
-> $$ = nterm term ()
Stack now 0 1 9 11 12 14 29 46 67 73 104 67 73 104 70 101 28 44
Entering state 26
Reducing stack by rule 54 (line 150):
-> $$ = nterm extraterm ()
Stack now 0 1 9 11 12 14 29 46 67 73 104 67 73 104 70 101 28 44 26
Entering state 42
Next token is token ',' ()
Reducing stack by rule 53 (line 147):
   $1 = nterm term ()
   $2 = nterm extraterm ()
-> $$ = nterm simpexpr ()
Stack now 0 1 9 11 12 14 29 46 67 73 104 67 73 104 70 101 28 44
Entering state 25
Next token is token ',' ()
Reducing stack by rule 44 (line 134):
   $1 = nterm simpexpr ()
-> $$ = nterm expr ()
Stack now 0 1 9 11 12 14 29 46 67 73 104 67 73 104 70 101 28 44
Entering state 24
Reducing stack by rule 43 (line 131):
   $1 = nterm expr ()
-> $$ = nterm assignment ()
Stack now 0 1 9 11 12 14 29 46 67 73 104 67 73 104 70 101 28 44
Entering state 65
Next token is token ',' ()
Shifting token ',' ()
Entering state 97
Reading a token: Next token is token "identifier" ()
Shifting token "identifier" ()
Entering state 10
Reducing stack by rule 69 (line 173):
   $1 = token "identifier" ()
-> $$ = nterm id ()
Stack now 0 1 9 11 12 14 29 46 67 73 104 67 73 104 70 101 28 44 65 97
Entering state 28
Reading a token: Next token is token ')' ()
Reducing stack by rule 67 (line 169):
   $1 = nterm id ()
-> $$ = nterm factor ()
Stack now 0 1 9 11 12 14 29 46 67 73 104 67 73 104 70 101 28 44 65 97
Entering state 27
Reducing stack by rule 59 (line 159):
-> $$ = nterm extrafactor ()
Stack now 0 1 9 11 12 14 29 46 67 73 104 67 73 104 70 101 28 44 65 97 27
Entering state 43
Next token is token ')' ()
Reducing stack by rule 58 (line 156):
   $1 = nterm factor ()
   $2 = nterm extrafactor ()
-> $$ = nterm term ()
Stack now 0 1 9 11 12 14 29 46 67 73 104 67 73 104 70 101 28 44 65 97
Entering state 26
Reducing stack by rule 54 (line 150):
-> $$ = nterm extraterm ()
Stack now 0 1 9 11 12 14 29 46 67 73 104 67 73 104 70 101 28 44 65 97 26
Entering state 42
Next token is token ')' ()
Reducing stack by rule 53 (line 147):
   $1 = nterm term ()
   $2 = nterm extraterm ()
-> $$ = nterm simpexpr ()
Stack now 0 1 9 11 12 14 29 46 67 73 104 67 73 104 70 101 28 44 65 97
Entering state 25
Next token is token ')' ()
Reducing stack by rule 44 (line 134):
   $1 = nterm simpexpr ()
-> $$ = nterm expr ()
Stack now 0 1 9 11 12 14 29 46 67 73 104 67 73 104 70 101 28 44 65 97
Entering state 24
Reducing stack by rule 43 (line 131):
   $1 = nterm expr ()
-> $$ = nterm assignment ()
Stack now 0 1 9 11 12 14 29 46 67 73 104 67 73 104 70 101 28 44 65 97
Entering state 65
Next token is token ')' ()
Reducing stack by rule 10 (line 72):
   $1 = nterm assignment ()
-> $$ = nterm parameterlist ()
Stack now 0 1 9 11 12 14 29 46 67 73 104 67 73 104 70 101 28 44 65 97
Entering state 114
Reducing stack by rule 11 (line 73):
   $1 = nterm assignment ()
   $2 = token ',' ()
   $3 = nterm parameterlist ()
-> $$ = nterm parameterlist ()
Stack now 0 1 9 11 12 14 29 46 67 73 104 67 73 104 70 101 28 44
Entering state 64
Next token is token ')' ()
Shifting token ')' ()
Entering state 96
Reducing stack by rule 9 (line 69):
   $1 = nterm id ()
   $2 = token '(' ()
   $3 = nterm parameterlist ()
   $4 = token ')' ()
-> $$ = nterm functioncall ()
Stack now 0 1 9 11 12 14 29 46 67 73 104 67 73 104 70 101
Entering state 22
Reducing stack by rule 66 (line 168):
   $1 = nterm functioncall ()
-> $$ = nterm factor ()
Stack now 0 1 9 11 12 14 29 46 67 73 104 67 73 104 70 101
Entering state 27
Reducing stack by rule 59 (line 159):
-> $$ = nterm extrafactor ()
Stack now 0 1 9 11 12 14 29 46 67 73 104 67 73 104 70 101 27
Entering state 43
Reading a token: Next token is token ')' ()
Reducing stack by rule 58 (line 156):
   $1 = nterm factor ()
   $2 = nterm extrafactor ()
-> $$ = nterm term ()
Stack now 0 1 9 11 12 14 29 46 67 73 104 67 73 104 70 101
Entering state 26
Reducing stack by rule 54 (line 150):
-> $$ = nterm extraterm ()
Stack now 0 1 9 11 12 14 29 46 67 73 104 67 73 104 70 101 26
Entering state 42
Next token is token ')' ()
Reducing stack by rule 53 (line 147):
   $1 = nterm term ()
   $2 = nterm extraterm ()
-> $$ = nterm simpexpr ()
Stack now 0 1 9 11 12 14 29 46 67 73 104 67 73 104 70 101
Entering state 25
Next token is token ')' ()
Reducing stack by rule 44 (line 134):
   $1 = nterm simpexpr ()
-> $$ = nterm expr ()
Stack now 0 1 9 11 12 14 29 46 67 73 104 67 73 104 70 101
Entering state 24
Reducing stack by rule 43 (line 131):
   $1 = nterm expr ()
-> $$ = nterm assignment ()
Stack now 0 1 9 11 12 14 29 46 67 73 104 67 73 104 70 101
Entering state 121
Next token is token ')' ()
Shifting token ')' ()
Entering state 130
Reducing stack by rule 33 (line 113):
   $1 = token "printf" ()
   $2 = token '(' ()
   $3 = nterm assignment ()
   $4 = token ')' ()
-> $$ = nterm printf ()
Stack now 0 1 9 11 12 14 29 46 67 73 104 67 73 104
Entering state 83
Reading a token: Next token is token ';' ()
Shifting token ';' ()
Entering state 108
Reducing stack by rule 21 (line 89):
   $1 = nterm printf ()
   $2 = token ';' ()
-> $$ = nterm statement ()
Stack now 0 1 9 11 12 14 29 46 67 73 104 67 73 104
Entering state 77
Reducing stack by rule 15 (line 81):
   $1 = nterm statement ()
-> $$ = nterm block ()
Stack now 0 1 9 11 12 14 29 46 67 73 104 67 73 104
Entering state 76
Reducing stack by rule 13 (line 77):
   $1 = nterm statementlist ()
   $2 = nterm block ()
-> $$ = nterm statementlist ()
Stack now 0 1 9 11 12 14 29 46 67 73 104 67 73
Entering state 104
Reading a token: Next token is token "printf" ()
Shifting token "printf" ()
Entering state 70
Reading a token: Next token is token '(' ()
Shifting token '(' ()
Entering state 101
Reading a token: Next token is token "identifier" ()
Shifting token "identifier" ()
Entering state 10
Reducing stack by rule 69 (line 173):
   $1 = token "identifier" ()
-> $$ = nterm id ()
Stack now 0 1 9 11 12 14 29 46 67 73 104 67 73 104 70 101
Entering state 28
Reading a token: Next token is token '(' ()
Shifting token '(' ()
Entering state 44
Reading a token: Next token is token "identifier" ()
Shifting token "identifier" ()
Entering state 10
Reducing stack by rule 69 (line 173):
   $1 = token "identifier" ()
-> $$ = nterm id ()
Stack now 0 1 9 11 12 14 29 46 67 73 104 67 73 104 70 101 28 44
Entering state 28
Reading a token: Next token is token ',' ()
Reducing stack by rule 67 (line 169):
   $1 = nterm id ()
-> $$ = nterm factor ()
Stack now 0 1 9 11 12 14 29 46 67 73 104 67 73 104 70 101 28 44
Entering state 27
Reducing stack by rule 59 (line 159):
-> $$ = nterm extrafactor ()
Stack now 0 1 9 11 12 14 29 46 67 73 104 67 73 104 70 101 28 44 27
Entering state 43
Next token is token ',' ()
Reducing stack by rule 58 (line 156):
   $1 = nterm factor ()
   $2 = nterm extrafactor ()
-> $$ = nterm term ()
Stack now 0 1 9 11 12 14 29 46 67 73 104 67 73 104 70 101 28 44
Entering state 26
Reducing stack by rule 54 (line 150):
-> $$ = nterm extraterm ()
Stack now 0 1 9 11 12 14 29 46 67 73 104 67 73 104 70 101 28 44 26
Entering state 42
Next token is token ',' ()
Reducing stack by rule 53 (line 147):
   $1 = nterm term ()
   $2 = nterm extraterm ()
-> $$ = nterm simpexpr ()
Stack now 0 1 9 11 12 14 29 46 67 73 104 67 73 104 70 101 28 44
Entering state 25
Next token is token ',' ()
Reducing stack by rule 44 (line 134):
   $1 = nterm simpexpr ()
-> $$ = nterm expr ()
Stack now 0 1 9 11 12 14 29 46 67 73 104 67 73 104 70 101 28 44
Entering state 24
Reducing stack by rule 43 (line 131):
   $1 = nterm expr ()
-> $$ = nterm assignment ()
Stack now 0 1 9 11 12 14 29 46 67 73 104 67 73 104 70 101 28 44
Entering state 65
Next token is token ',' ()
Shifting token ',' ()
Entering state 97
Reading a token: Next token is token "identifier" ()
Shifting token "identifier" ()
Entering state 10
Reducing stack by rule 69 (line 173):
   $1 = token "identifier" ()
-> $$ = nterm id ()
Stack now 0 1 9 11 12 14 29 46 67 73 104 67 73 104 70 101 28 44 65 97
Entering state 28
Reading a token: Next token is token ')' ()
Reducing stack by rule 67 (line 169):
   $1 = nterm id ()
-> $$ = nterm factor ()
Stack now 0 1 9 11 12 14 29 46 67 73 104 67 73 104 70 101 28 44 65 97
Entering state 27
Reducing stack by rule 59 (line 159):
-> $$ = nterm extrafactor ()
Stack now 0 1 9 11 12 14 29 46 67 73 104 67 73 104 70 101 28 44 65 97 27
Entering state 43
Next token is token ')' ()
Reducing stack by rule 58 (line 156):
   $1 = nterm factor ()
   $2 = nterm extrafactor ()
-> $$ = nterm term ()
Stack now 0 1 9 11 12 14 29 46 67 73 104 67 73 104 70 101 28 44 65 97
Entering state 26
Reducing stack by rule 54 (line 150):
-> $$ = nterm extraterm ()
Stack now 0 1 9 11 12 14 29 46 67 73 104 67 73 104 70 101 28 44 65 97 26
Entering state 42
Next token is token ')' ()
Reducing stack by rule 53 (line 147):
   $1 = nterm term ()
   $2 = nterm extraterm ()
-> $$ = nterm simpexpr ()
Stack now 0 1 9 11 12 14 29 46 67 73 104 67 73 104 70 101 28 44 65 97
Entering state 25
Next token is token ')' ()
Reducing stack by rule 44 (line 134):
   $1 = nterm simpexpr ()
-> $$ = nterm expr ()
Stack now 0 1 9 11 12 14 29 46 67 73 104 67 73 104 70 101 28 44 65 97
Entering state 24
Reducing stack by rule 43 (line 131):
   $1 = nterm expr ()
-> $$ = nterm assignment ()
Stack now 0 1 9 11 12 14 29 46 67 73 104 67 73 104 70 101 28 44 65 97
Entering state 65
Next token is token ')' ()
Reducing stack by rule 10 (line 72):
   $1 = nterm assignment ()
-> $$ = nterm parameterlist ()
Stack now 0 1 9 11 12 14 29 46 67 73 104 67 73 104 70 101 28 44 65 97
Entering state 114
Reducing stack by rule 11 (line 73):
   $1 = nterm assignment ()
   $2 = token ',' ()
   $3 = nterm parameterlist ()
-> $$ = nterm parameterlist ()
Stack now 0 1 9 11 12 14 29 46 67 73 104 67 73 104 70 101 28 44
Entering state 64
Next token is token ')' ()
Shifting token ')' ()
Entering state 96
Reducing stack by rule 9 (line 69):
   $1 = nterm id ()
   $2 = token '(' ()
   $3 = nterm parameterlist ()
   $4 = token ')' ()
-> $$ = nterm functioncall ()
Stack now 0 1 9 11 12 14 29 46 67 73 104 67 73 104 70 101
Entering state 22
Reducing stack by rule 66 (line 168):
   $1 = nterm functioncall ()
-> $$ = nterm factor ()
Stack now 0 1 9 11 12 14 29 46 67 73 104 67 73 104 70 101
Entering state 27
Reducing stack by rule 59 (line 159):
-> $$ = nterm extrafactor ()
Stack now 0 1 9 11 12 14 29 46 67 73 104 67 73 104 70 101 27
Entering state 43
Reading a token: Next token is token ')' ()
Reducing stack by rule 58 (line 156):
   $1 = nterm factor ()
   $2 = nterm extrafactor ()
-> $$ = nterm term ()
Stack now 0 1 9 11 12 14 29 46 67 73 104 67 73 104 70 101
Entering state 26
Reducing stack by rule 54 (line 150):
-> $$ = nterm extraterm ()
Stack now 0 1 9 11 12 14 29 46 67 73 104 67 73 104 70 101 26
Entering state 42
Next token is token ')' ()
Reducing stack by rule 53 (line 147):
   $1 = nterm term ()
   $2 = nterm extraterm ()
-> $$ = nterm simpexpr ()
Stack now 0 1 9 11 12 14 29 46 67 73 104 67 73 104 70 101
Entering state 25
Next token is token ')' ()
Reducing stack by rule 44 (line 134):
   $1 = nterm simpexpr ()
-> $$ = nterm expr ()
Stack now 0 1 9 11 12 14 29 46 67 73 104 67 73 104 70 101
Entering state 24
Reducing stack by rule 43 (line 131):
   $1 = nterm expr ()
-> $$ = nterm assignment ()
Stack now 0 1 9 11 12 14 29 46 67 73 104 67 73 104 70 101
Entering state 121
Next token is token ')' ()
Shifting token ')' ()
Entering state 130
Reducing stack by rule 33 (line 113):
   $1 = token "printf" ()
   $2 = token '(' ()
   $3 = nterm assignment ()
   $4 = token ')' ()
-> $$ = nterm printf ()
Stack now 0 1 9 11 12 14 29 46 67 73 104 67 73 104
Entering state 83
Reading a token: Next token is token ';' ()
Shifting token ';' ()
Entering state 108
Reducing stack by rule 21 (line 89):
   $1 = nterm printf ()
   $2 = token ';' ()
-> $$ = nterm statement ()
Stack now 0 1 9 11 12 14 29 46 67 73 104 67 73 104
Entering state 77
Reducing stack by rule 15 (line 81):
   $1 = nterm statement ()
-> $$ = nterm block ()
Stack now 0 1 9 11 12 14 29 46 67 73 104 67 73 104
Entering state 76
Reducing stack by rule 13 (line 77):
   $1 = nterm statementlist ()
   $2 = nterm block ()
-> $$ = nterm statementlist ()
Stack now 0 1 9 11 12 14 29 46 67 73 104 67 73
Entering state 104
Reading a token: Next token is token "identifier" ()
Shifting token "identifier" ()
Entering state 10
Reducing stack by rule 69 (line 173):
   $1 = token "identifier" ()
-> $$ = nterm id ()
Stack now 0 1 9 11 12 14 29 46 67 73 104 67 73 104
Entering state 87
Reading a token: Next token is token '=' ()
Shifting token '=' ()
Entering state 112
Reading a token: Next token is token "identifier" ()
Shifting token "identifier" ()
Entering state 10
Reducing stack by rule 69 (line 173):
   $1 = token "identifier" ()
-> $$ = nterm id ()
Stack now 0 1 9 11 12 14 29 46 67 73 104 67 73 104 87 112
Entering state 28
Reading a token: Next token is token '+' ()
Reducing stack by rule 67 (line 169):
   $1 = nterm id ()
-> $$ = nterm factor ()
Stack now 0 1 9 11 12 14 29 46 67 73 104 67 73 104 87 112
Entering state 27
Reducing stack by rule 59 (line 159):
-> $$ = nterm extrafactor ()
Stack now 0 1 9 11 12 14 29 46 67 73 104 67 73 104 87 112 27
Entering state 43
Next token is token '+' ()
Reducing stack by rule 58 (line 156):
   $1 = nterm factor ()
   $2 = nterm extrafactor ()
-> $$ = nterm term ()
Stack now 0 1 9 11 12 14 29 46 67 73 104 67 73 104 87 112
Entering state 26
Reducing stack by rule 54 (line 150):
-> $$ = nterm extraterm ()
Stack now 0 1 9 11 12 14 29 46 67 73 104 67 73 104 87 112 26
Entering state 42
Next token is token '+' ()
Shifting token '+' ()
Entering state 57
Reading a token: Next token is token "integer literal" ()
Shifting token "integer literal" ()
Entering state 18
Reducing stack by rule 63 (line 165):
   $1 = token "integer literal" ()
-> $$ = nterm factor ()
Stack now 0 1 9 11 12 14 29 46 67 73 104 67 73 104 87 112 26 42 57
Entering state 27
Reducing stack by rule 59 (line 159):
-> $$ = nterm extrafactor ()
Stack now 0 1 9 11 12 14 29 46 67 73 104 67 73 104 87 112 26 42 57 27
Entering state 43
Reading a token: Next token is token ';' ()
Reducing stack by rule 58 (line 156):
   $1 = nterm factor ()
   $2 = nterm extrafactor ()
-> $$ = nterm term ()
Stack now 0 1 9 11 12 14 29 46 67 73 104 67 73 104 87 112 26 42 57
Entering state 90
Reducing stack by rule 55 (line 151):
   $1 = nterm extraterm ()
   $2 = token '+' ()
   $3 = nterm term ()
-> $$ = nterm extraterm ()
Stack now 0 1 9 11 12 14 29 46 67 73 104 67 73 104 87 112 26
Entering state 42
Next token is token ';' ()
Reducing stack by rule 53 (line 147):
   $1 = nterm term ()
   $2 = nterm extraterm ()
-> $$ = nterm simpexpr ()
Stack now 0 1 9 11 12 14 29 46 67 73 104 67 73 104 87 112
Entering state 25
Next token is token ';' ()
Reducing stack by rule 44 (line 134):
   $1 = nterm simpexpr ()
-> $$ = nterm expr ()
Stack now 0 1 9 11 12 14 29 46 67 73 104 67 73 104 87 112
Entering state 24
Reducing stack by rule 43 (line 131):
   $1 = nterm expr ()
-> $$ = nterm assignment ()
Stack now 0 1 9 11 12 14 29 46 67 73 104 67 73 104 87 112
Entering state 124
Reducing stack by rule 41 (line 127):
   $1 = nterm id ()
   $2 = token '=' ()
   $3 = nterm assignment ()
-> $$ = nterm statassignment ()
Stack now 0 1 9 11 12 14 29 46 67 73 104 67 73 104
Entering state 86
Next token is token ';' ()
Shifting token ';' ()
Entering state 111
Reducing stack by rule 23 (line 91):
   $1 = nterm statassignment ()
   $2 = token ';' ()
-> $$ = nterm statement ()
Stack now 0 1 9 11 12 14 29 46 67 73 104 67 73 104
Entering state 77
Reducing stack by rule 15 (line 81):
   $1 = nterm statement ()
-> $$ = nterm block ()
Stack now 0 1 9 11 12 14 29 46 67 73 104 67 73 104
Entering state 76
Reducing stack by rule 13 (line 77):
   $1 = nterm statementlist ()
   $2 = nterm block ()
-> $$ = nterm statementlist ()
Stack now 0 1 9 11 12 14 29 46 67 73 104 67 73
Entering state 104
Reading a token: Next token is token "identifier" ()
Shifting token "identifier" ()
Entering state 10
Reducing stack by rule 69 (line 173):
   $1 = token "identifier" ()
-> $$ = nterm id ()
Stack now 0 1 9 11 12 14 29 46 67 73 104 67 73 104
Entering state 87
Reading a token: Next token is token '=' ()
Shifting token '=' ()
Entering state 112
Reading a token: Next token is token "identifier" ()
Shifting token "identifier" ()
Entering state 10
Reducing stack by rule 69 (line 173):
   $1 = token "identifier" ()
-> $$ = nterm id ()
Stack now 0 1 9 11 12 14 29 46 67 73 104 67 73 104 87 112
Entering state 28
Reading a token: Next token is token '(' ()
Shifting token '(' ()
Entering state 44
Reading a token: Next token is token "identifier" ()
Shifting token "identifier" ()
Entering state 10
Reducing stack by rule 69 (line 173):
   $1 = token "identifier" ()
-> $$ = nterm id ()
Stack now 0 1 9 11 12 14 29 46 67 73 104 67 73 104 87 112 28 44
Entering state 28
Reading a token: Next token is token ')' ()
Reducing stack by rule 67 (line 169):
   $1 = nterm id ()
-> $$ = nterm factor ()
Stack now 0 1 9 11 12 14 29 46 67 73 104 67 73 104 87 112 28 44
Entering state 27
Reducing stack by rule 59 (line 159):
-> $$ = nterm extrafactor ()
Stack now 0 1 9 11 12 14 29 46 67 73 104 67 73 104 87 112 28 44 27
Entering state 43
Next token is token ')' ()
Reducing stack by rule 58 (line 156):
   $1 = nterm factor ()
   $2 = nterm extrafactor ()
-> $$ = nterm term ()
Stack now 0 1 9 11 12 14 29 46 67 73 104 67 73 104 87 112 28 44
Entering state 26
Reducing stack by rule 54 (line 150):
-> $$ = nterm extraterm ()
Stack now 0 1 9 11 12 14 29 46 67 73 104 67 73 104 87 112 28 44 26
Entering state 42
Next token is token ')' ()
Reducing stack by rule 53 (line 147):
   $1 = nterm term ()
   $2 = nterm extraterm ()
-> $$ = nterm simpexpr ()
Stack now 0 1 9 11 12 14 29 46 67 73 104 67 73 104 87 112 28 44
Entering state 25
Next token is token ')' ()
Reducing stack by rule 44 (line 134):
   $1 = nterm simpexpr ()
-> $$ = nterm expr ()
Stack now 0 1 9 11 12 14 29 46 67 73 104 67 73 104 87 112 28 44
Entering state 24
Reducing stack by rule 43 (line 131):
   $1 = nterm expr ()
-> $$ = nterm assignment ()
Stack now 0 1 9 11 12 14 29 46 67 73 104 67 73 104 87 112 28 44
Entering state 65
Next token is token ')' ()
Reducing stack by rule 10 (line 72):
   $1 = nterm assignment ()
-> $$ = nterm parameterlist ()
Stack now 0 1 9 11 12 14 29 46 67 73 104 67 73 104 87 112 28 44
Entering state 64
Next token is token ')' ()
Shifting token ')' ()
Entering state 96
Reducing stack by rule 9 (line 69):
   $1 = nterm id ()
   $2 = token '(' ()
   $3 = nterm parameterlist ()
   $4 = token ')' ()
-> $$ = nterm functioncall ()
Stack now 0 1 9 11 12 14 29 46 67 73 104 67 73 104 87 112
Entering state 22
Reducing stack by rule 66 (line 168):
   $1 = nterm functioncall ()
-> $$ = nterm factor ()
Stack now 0 1 9 11 12 14 29 46 67 73 104 67 73 104 87 112
Entering state 27
Reducing stack by rule 59 (line 159):
-> $$ = nterm extrafactor ()
Stack now 0 1 9 11 12 14 29 46 67 73 104 67 73 104 87 112 27
Entering state 43
Reading a token: Next token is token ';' ()
Reducing stack by rule 58 (line 156):
   $1 = nterm factor ()
   $2 = nterm extrafactor ()
-> $$ = nterm term ()
Stack now 0 1 9 11 12 14 29 46 67 73 104 67 73 104 87 112
Entering state 26
Reducing stack by rule 54 (line 150):
-> $$ = nterm extraterm ()
Stack now 0 1 9 11 12 14 29 46 67 73 104 67 73 104 87 112 26
Entering state 42
Next token is token ';' ()
Reducing stack by rule 53 (line 147):
   $1 = nterm term ()
   $2 = nterm extraterm ()
-> $$ = nterm simpexpr ()
Stack now 0 1 9 11 12 14 29 46 67 73 104 67 73 104 87 112
Entering state 25
Next token is token ';' ()
Reducing stack by rule 44 (line 134):
   $1 = nterm simpexpr ()
-> $$ = nterm expr ()
Stack now 0 1 9 11 12 14 29 46 67 73 104 67 73 104 87 112
Entering state 24
Reducing stack by rule 43 (line 131):
   $1 = nterm expr ()
-> $$ = nterm assignment ()
Stack now 0 1 9 11 12 14 29 46 67 73 104 67 73 104 87 112
Entering state 124
Reducing stack by rule 41 (line 127):
   $1 = nterm id ()
   $2 = token '=' ()
   $3 = nterm assignment ()
-> $$ = nterm statassignment ()
Stack now 0 1 9 11 12 14 29 46 67 73 104 67 73 104
Entering state 86
Next token is token ';' ()
Shifting token ';' ()
Entering state 111
Reducing stack by rule 23 (line 91):
   $1 = nterm statassignment ()
   $2 = token ';' ()
-> $$ = nterm statement ()
Stack now 0 1 9 11 12 14 29 46 67 73 104 67 73 104
Entering state 77
Reducing stack by rule 15 (line 81):
   $1 = nterm statement ()
-> $$ = nterm block ()
Stack now 0 1 9 11 12 14 29 46 67 73 104 67 73 104
Entering state 76
Reducing stack by rule 13 (line 77):
   $1 = nterm statementlist ()
   $2 = nterm block ()
-> $$ = nterm statementlist ()
Stack now 0 1 9 11 12 14 29 46 67 73 104 67 73
Entering state 104
Reading a token: Next token is token '}' ()
Shifting token '}' ()
Entering state 123
Reducing stack by rule 14 (line 80):
   $1 = token '{' ()
   $2 = nterm statementlist ()
   $3 = token '}' ()
-> $$ = nterm block ()
Stack now 0 1 9 11 12 14 29 46 67 73 104 67
Entering state 98
Reading a token: Next token is token "while" ()
Shifting token "while" ()
Entering state 115
Reading a token: Next token is token '(' ()
Shifting token '(' ()
Entering state 125
Reading a token: Next token is token "identifier" ()
Shifting token "identifier" ()
Entering state 10
Reducing stack by rule 69 (line 173):
   $1 = token "identifier" ()
-> $$ = nterm id ()
Stack now 0 1 9 11 12 14 29 46 67 73 104 67 98 115 125
Entering state 28
Reading a token: Next token is token "!=" ()
Reducing stack by rule 67 (line 169):
   $1 = nterm id ()
-> $$ = nterm factor ()
Stack now 0 1 9 11 12 14 29 46 67 73 104 67 98 115 125
Entering state 27
Reducing stack by rule 59 (line 159):
-> $$ = nterm extrafactor ()
Stack now 0 1 9 11 12 14 29 46 67 73 104 67 98 115 125 27
Entering state 43
Next token is token "!=" ()
Reducing stack by rule 58 (line 156):
   $1 = nterm factor ()
   $2 = nterm extrafactor ()
-> $$ = nterm term ()
Stack now 0 1 9 11 12 14 29 46 67 73 104 67 98 115 125
Entering state 26
Reducing stack by rule 54 (line 150):
-> $$ = nterm extraterm ()
Stack now 0 1 9 11 12 14 29 46 67 73 104 67 98 115 125 26
Entering state 42
Next token is token "!=" ()
Reducing stack by rule 53 (line 147):
   $1 = nterm term ()
   $2 = nterm extraterm ()
-> $$ = nterm simpexpr ()
Stack now 0 1 9 11 12 14 29 46 67 73 104 67 98 115 125
Entering state 25
Next token is token "!=" ()
Shifting token "!=" ()
Entering state 36
Reading a token: Next token is token "boolean literal" ()
Shifting token "boolean literal" ()
Entering state 20
Reducing stack by rule 65 (line 167):
   $1 = token "boolean literal" ()
-> $$ = nterm factor ()
Stack now 0 1 9 11 12 14 29 46 67 73 104 67 98 115 125 25 36
Entering state 27
Reducing stack by rule 59 (line 159):
-> $$ = nterm extrafactor ()
Stack now 0 1 9 11 12 14 29 46 67 73 104 67 98 115 125 25 36 27
Entering state 43
Reading a token: Next token is token ')' ()
Reducing stack by rule 58 (line 156):
   $1 = nterm factor ()
   $2 = nterm extrafactor ()
-> $$ = nterm term ()
Stack now 0 1 9 11 12 14 29 46 67 73 104 67 98 115 125 25 36
Entering state 26
Reducing stack by rule 54 (line 150):
-> $$ = nterm extraterm ()
Stack now 0 1 9 11 12 14 29 46 67 73 104 67 98 115 125 25 36 26
Entering state 42
Next token is token ')' ()
Reducing stack by rule 53 (line 147):
   $1 = nterm term ()
   $2 = nterm extraterm ()
-> $$ = nterm simpexpr ()
Stack now 0 1 9 11 12 14 29 46 67 73 104 67 98 115 125 25 36
Entering state 52
Reducing stack by rule 47 (line 139):
   $1 = token "!=" ()
   $2 = nterm simpexpr ()
-> $$ = nterm extraexpr ()
Stack now 0 1 9 11 12 14 29 46 67 73 104 67 98 115 125 25
Entering state 41
Reducing stack by rule 45 (line 135):
   $1 = nterm simpexpr ()
   $2 = nterm extraexpr ()
-> $$ = nterm expr ()
Stack now 0 1 9 11 12 14 29 46 67 73 104 67 98 115 125
Entering state 24
Reducing stack by rule 43 (line 131):
   $1 = nterm expr ()
-> $$ = nterm assignment ()
Stack now 0 1 9 11 12 14 29 46 67 73 104 67 98 115 125
Entering state 132
Next token is token ')' ()
Shifting token ')' ()
Entering state 137
Reducing stack by rule 29 (line 103):
   $1 = token "do" ()
   $2 = nterm block ()
   $3 = token "while" ()
   $4 = token '(' ()
   $5 = nterm assignment ()
   $6 = token ')' ()
-> $$ = nterm dowhilestatement ()
Stack now 0 1 9 11 12 14 29 46 67 73 104
Entering state 80
Reading a token: Next token is token ';' ()
Shifting token ';' ()
Entering state 106
Reducing stack by rule 20 (line 88):
   $1 = nterm dowhilestatement ()
   $2 = token ';' ()
-> $$ = nterm statement ()
Stack now 0 1 9 11 12 14 29 46 67 73 104
Entering state 77
Reducing stack by rule 15 (line 81):
   $1 = nterm statement ()
-> $$ = nterm block ()
Stack now 0 1 9 11 12 14 29 46 67 73 104
Entering state 76
Reducing stack by rule 13 (line 77):
   $1 = nterm statementlist ()
   $2 = nterm block ()
-> $$ = nterm statementlist ()
Stack now 0 1 9 11 12 14 29 46 67 73
Entering state 104
Reading a token: Next token is token "identifier" ()
Shifting token "identifier" ()
Entering state 10
Reducing stack by rule 69 (line 173):
   $1 = token "identifier" ()
-> $$ = nterm id ()
Stack now 0 1 9 11 12 14 29 46 67 73 104
Entering state 87
Reading a token: Next token is token '=' ()
Shifting token '=' ()
Entering state 112
Reading a token: Next token is token "identifier" ()
Shifting token "identifier" ()
Entering state 10
Reducing stack by rule 69 (line 173):
   $1 = token "identifier" ()
-> $$ = nterm id ()
Stack now 0 1 9 11 12 14 29 46 67 73 104 87 112
Entering state 28
Reading a token: Next token is token '(' ()
Shifting token '(' ()
Entering state 44
Reading a token: Next token is token "identifier" ()
Shifting token "identifier" ()
Entering state 10
Reducing stack by rule 69 (line 173):
   $1 = token "identifier" ()
-> $$ = nterm id ()
Stack now 0 1 9 11 12 14 29 46 67 73 104 87 112 28 44
Entering state 28
Reading a token: Next token is token ')' ()
Reducing stack by rule 67 (line 169):
   $1 = nterm id ()
-> $$ = nterm factor ()
Stack now 0 1 9 11 12 14 29 46 67 73 104 87 112 28 44
Entering state 27
Reducing stack by rule 59 (line 159):
-> $$ = nterm extrafactor ()
Stack now 0 1 9 11 12 14 29 46 67 73 104 87 112 28 44 27
Entering state 43
Next token is token ')' ()
Reducing stack by rule 58 (line 156):
   $1 = nterm factor ()
   $2 = nterm extrafactor ()
-> $$ = nterm term ()
Stack now 0 1 9 11 12 14 29 46 67 73 104 87 112 28 44
Entering state 26
Reducing stack by rule 54 (line 150):
-> $$ = nterm extraterm ()
Stack now 0 1 9 11 12 14 29 46 67 73 104 87 112 28 44 26
Entering state 42
Next token is token ')' ()
Reducing stack by rule 53 (line 147):
   $1 = nterm term ()
   $2 = nterm extraterm ()
-> $$ = nterm simpexpr ()
Stack now 0 1 9 11 12 14 29 46 67 73 104 87 112 28 44
Entering state 25
Next token is token ')' ()
Reducing stack by rule 44 (line 134):
   $1 = nterm simpexpr ()
-> $$ = nterm expr ()
Stack now 0 1 9 11 12 14 29 46 67 73 104 87 112 28 44
Entering state 24
Reducing stack by rule 43 (line 131):
   $1 = nterm expr ()
-> $$ = nterm assignment ()
Stack now 0 1 9 11 12 14 29 46 67 73 104 87 112 28 44
Entering state 65
Next token is token ')' ()
Reducing stack by rule 10 (line 72):
   $1 = nterm assignment ()
-> $$ = nterm parameterlist ()
Stack now 0 1 9 11 12 14 29 46 67 73 104 87 112 28 44
Entering state 64
Next token is token ')' ()
Shifting token ')' ()
Entering state 96
Reducing stack by rule 9 (line 69):
   $1 = nterm id ()
   $2 = token '(' ()
   $3 = nterm parameterlist ()
   $4 = token ')' ()
-> $$ = nterm functioncall ()
Stack now 0 1 9 11 12 14 29 46 67 73 104 87 112
Entering state 22
Reducing stack by rule 66 (line 168):
   $1 = nterm functioncall ()
-> $$ = nterm factor ()
Stack now 0 1 9 11 12 14 29 46 67 73 104 87 112
Entering state 27
Reducing stack by rule 59 (line 159):
-> $$ = nterm extrafactor ()
Stack now 0 1 9 11 12 14 29 46 67 73 104 87 112 27
Entering state 43
Reading a token: Next token is token ';' ()
Reducing stack by rule 58 (line 156):
   $1 = nterm factor ()
   $2 = nterm extrafactor ()
-> $$ = nterm term ()
Stack now 0 1 9 11 12 14 29 46 67 73 104 87 112
Entering state 26
Reducing stack by rule 54 (line 150):
-> $$ = nterm extraterm ()
Stack now 0 1 9 11 12 14 29 46 67 73 104 87 112 26
Entering state 42
Next token is token ';' ()
Reducing stack by rule 53 (line 147):
   $1 = nterm term ()
   $2 = nterm extraterm ()
-> $$ = nterm simpexpr ()
Stack now 0 1 9 11 12 14 29 46 67 73 104 87 112
Entering state 25
Next token is token ';' ()
Reducing stack by rule 44 (line 134):
   $1 = nterm simpexpr ()
-> $$ = nterm expr ()
Stack now 0 1 9 11 12 14 29 46 67 73 104 87 112
Entering state 24
Reducing stack by rule 43 (line 131):
   $1 = nterm expr ()
-> $$ = nterm assignment ()
Stack now 0 1 9 11 12 14 29 46 67 73 104 87 112
Entering state 124
Reducing stack by rule 41 (line 127):
   $1 = nterm id ()
   $2 = token '=' ()
   $3 = nterm assignment ()
-> $$ = nterm statassignment ()
Stack now 0 1 9 11 12 14 29 46 67 73 104
Entering state 86
Next token is token ';' ()
Shifting token ';' ()
Entering state 111
Reducing stack by rule 23 (line 91):
   $1 = nterm statassignment ()
   $2 = token ';' ()
-> $$ = nterm statement ()
Stack now 0 1 9 11 12 14 29 46 67 73 104
Entering state 77
Reducing stack by rule 15 (line 81):
   $1 = nterm statement ()
-> $$ = nterm block ()
Stack now 0 1 9 11 12 14 29 46 67 73 104
Entering state 76
Reducing stack by rule 13 (line 77):
   $1 = nterm statementlist ()
   $2 = nterm block ()
-> $$ = nterm statementlist ()
Stack now 0 1 9 11 12 14 29 46 67 73
Entering state 104
Reading a token: Next token is token '}' ()
Shifting token '}' ()
Entering state 123
Reducing stack by rule 14 (line 80):
   $1 = token '{' ()
   $2 = nterm statementlist ()
   $3 = token '}' ()
-> $$ = nterm block ()
Stack now 0 1 9 11 12 14 29 46 67
Entering state 98
Reading a token: Next token is token "while" ()
Shifting token "while" ()
Entering state 115
Reading a token: Next token is token '(' ()
Shifting token '(' ()
Entering state 125
Reading a token: Next token is token "identifier" ()
Shifting token "identifier" ()
Entering state 10
Reducing stack by rule 69 (line 173):
   $1 = token "identifier" ()
-> $$ = nterm id ()
Stack now 0 1 9 11 12 14 29 46 67 98 115 125
Entering state 28
Reading a token: Next token is token "!=" ()
Reducing stack by rule 67 (line 169):
   $1 = nterm id ()
-> $$ = nterm factor ()
Stack now 0 1 9 11 12 14 29 46 67 98 115 125
Entering state 27
Reducing stack by rule 59 (line 159):
-> $$ = nterm extrafactor ()
Stack now 0 1 9 11 12 14 29 46 67 98 115 125 27
Entering state 43
Next token is token "!=" ()
Reducing stack by rule 58 (line 156):
   $1 = nterm factor ()
   $2 = nterm extrafactor ()
-> $$ = nterm term ()
Stack now 0 1 9 11 12 14 29 46 67 98 115 125
Entering state 26
Reducing stack by rule 54 (line 150):
-> $$ = nterm extraterm ()
Stack now 0 1 9 11 12 14 29 46 67 98 115 125 26
Entering state 42
Next token is token "!=" ()
Reducing stack by rule 53 (line 147):
   $1 = nterm term ()
   $2 = nterm extraterm ()
-> $$ = nterm simpexpr ()
Stack now 0 1 9 11 12 14 29 46 67 98 115 125
Entering state 25
Next token is token "!=" ()
Shifting token "!=" ()
Entering state 36
Reading a token: Next token is token "boolean literal" ()
Shifting token "boolean literal" ()
Entering state 20
Reducing stack by rule 65 (line 167):
   $1 = token "boolean literal" ()
-> $$ = nterm factor ()
Stack now 0 1 9 11 12 14 29 46 67 98 115 125 25 36
Entering state 27
Reducing stack by rule 59 (line 159):
-> $$ = nterm extrafactor ()
Stack now 0 1 9 11 12 14 29 46 67 98 115 125 25 36 27
Entering state 43
Reading a token: Next token is token ')' ()
Reducing stack by rule 58 (line 156):
   $1 = nterm factor ()
   $2 = nterm extrafactor ()
-> $$ = nterm term ()
Stack now 0 1 9 11 12 14 29 46 67 98 115 125 25 36
Entering state 26
Reducing stack by rule 54 (line 150):
-> $$ = nterm extraterm ()
Stack now 0 1 9 11 12 14 29 46 67 98 115 125 25 36 26
Entering state 42
Next token is token ')' ()
Reducing stack by rule 53 (line 147):
   $1 = nterm term ()
   $2 = nterm extraterm ()
-> $$ = nterm simpexpr ()
Stack now 0 1 9 11 12 14 29 46 67 98 115 125 25 36
Entering state 52
Reducing stack by rule 47 (line 139):
   $1 = token "!=" ()
   $2 = nterm simpexpr ()
-> $$ = nterm extraexpr ()
Stack now 0 1 9 11 12 14 29 46 67 98 115 125 25
Entering state 41
Reducing stack by rule 45 (line 135):
   $1 = nterm simpexpr ()
   $2 = nterm extraexpr ()
-> $$ = nterm expr ()
Stack now 0 1 9 11 12 14 29 46 67 98 115 125
Entering state 24
Reducing stack by rule 43 (line 131):
   $1 = nterm expr ()
-> $$ = nterm assignment ()
Stack now 0 1 9 11 12 14 29 46 67 98 115 125
Entering state 132
Next token is token ')' ()
Shifting token ')' ()
Entering state 137
Reducing stack by rule 29 (line 103):
   $1 = token "do" ()
   $2 = nterm block ()
   $3 = token "while" ()
   $4 = token '(' ()
   $5 = nterm assignment ()
   $6 = token ')' ()
-> $$ = nterm dowhilestatement ()
Stack now 0 1 9 11 12 14 29 46
Entering state 80
Reading a token: Next token is token ';' ()
Shifting token ';' ()
Entering state 106
Reducing stack by rule 20 (line 88):
   $1 = nterm dowhilestatement ()
   $2 = token ';' ()
-> $$ = nterm statement ()
Stack now 0 1 9 11 12 14 29 46
Entering state 77
Reducing stack by rule 15 (line 81):
   $1 = nterm statement ()
-> $$ = nterm block ()
Stack now 0 1 9 11 12 14 29 46
Entering state 76
Reducing stack by rule 13 (line 77):
   $1 = nterm statementlist ()
   $2 = nterm block ()
-> $$ = nterm statementlist ()
Stack now 0 1 9 11 12 14 29
Entering state 46
Reading a token: Next token is token '}' ()
Shifting token '}' ()
Entering state 74
Reducing stack by rule 5 (line 61):
   $1 = nterm type ()
   $2 = nterm id ()
   $3 = token '(' ()
   $4 = token ')' ()
   $5 = token '{' ()
   $6 = nterm statementlist ()
   $7 = token '}' ()
-> $$ = nterm functiondefinition ()
Stack now 0 1
Entering state 7
Reducing stack by rule 3 (line 57):
   $1 = nterm program ()
   $2 = nterm functiondefinition ()
-> $$ = nterm program ()
Stack now 0
Entering state 1
Reading a token: Now at end of input.
Shifting token $end ()
Entering state 2
Stack now 0 1 2
Cleanup: popping token $end ()
Cleanup: popping nterm program ()
